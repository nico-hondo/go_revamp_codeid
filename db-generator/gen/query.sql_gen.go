// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package models

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const createAddrees = `-- name: CreateAddrees :one

INSERT INTO users.users_address
(etad_addr_id, etad_modified_date, etad_entity_id, etad_adty_id)
VALUES($1,$2,$3,$4)
RETURNING etad_addr_id
`

type CreateAddreesParams struct {
	EtadAddrID       int32         `db:"etad_addr_id" json:"etadAddrId"`
	EtadModifiedDate sql.NullTime  `db:"etad_modified_date" json:"etadModifiedDate"`
	EtadEntityID     sql.NullInt32 `db:"etad_entity_id" json:"etadEntityId"`
	EtadAdtyID       sql.NullInt32 `db:"etad_adty_id" json:"etadAdtyId"`
}

func (q *Queries) CreateAddrees(ctx context.Context, arg CreateAddreesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createAddrees,
		arg.EtadAddrID,
		arg.EtadModifiedDate,
		arg.EtadEntityID,
		arg.EtadAdtyID,
	)
	var etad_addr_id int32
	err := row.Scan(&etad_addr_id)
	return etad_addr_id, err
}

const createBusinessEntity = `-- name: CreateBusinessEntity :one
INSERT INTO users.business_entity 
(entity_id)
VALUES($1)
RETURNING entity_id
`

func (q *Queries) CreateBusinessEntity(ctx context.Context, entityID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBusinessEntity, entityID)
	var entity_id int32
	err := row.Scan(&entity_id)
	return entity_id, err
}

const createEducation = `-- name: CreateEducation :one

INSERT INTO users.users_education
(usdu_id, usdu_entity_id, usdu_school, usdu_degree, usdu_field_study,
usdu_graduate_year, usdu_start_date, usdu_end_date, usdu_grade,
usdu_activities, usdu_description, usdu_modified_date)
VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
RETURNING usdu_id
`

type CreateEducationParams struct {
	UsduID           int32          `db:"usdu_id" json:"usduId"`
	UsduEntityID     int32          `db:"usdu_entity_id" json:"usduEntityId"`
	UsduSchool       sql.NullString `db:"usdu_school" json:"usduSchool"`
	UsduDegree       sql.NullString `db:"usdu_degree" json:"usduDegree"`
	UsduFieldStudy   sql.NullString `db:"usdu_field_study" json:"usduFieldStudy"`
	UsduGraduateYear sql.NullString `db:"usdu_graduate_year" json:"usduGraduateYear"`
	UsduStartDate    sql.NullTime   `db:"usdu_start_date" json:"usduStartDate"`
	UsduEndDate      sql.NullTime   `db:"usdu_end_date" json:"usduEndDate"`
	UsduGrade        sql.NullString `db:"usdu_grade" json:"usduGrade"`
	UsduActivities   sql.NullString `db:"usdu_activities" json:"usduActivities"`
	UsduDescription  sql.NullString `db:"usdu_description" json:"usduDescription"`
	UsduModifiedDate sql.NullTime   `db:"usdu_modified_date" json:"usduModifiedDate"`
}

func (q *Queries) CreateEducation(ctx context.Context, arg CreateEducationParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEducation,
		arg.UsduID,
		arg.UsduEntityID,
		arg.UsduSchool,
		arg.UsduDegree,
		arg.UsduFieldStudy,
		arg.UsduGraduateYear,
		arg.UsduStartDate,
		arg.UsduEndDate,
		arg.UsduGrade,
		arg.UsduActivities,
		arg.UsduDescription,
		arg.UsduModifiedDate,
	)
	var usdu_id int32
	err := row.Scan(&usdu_id)
	return usdu_id, err
}

const createEmail = `-- name: CreateEmail :one

INSERT INTO users.users_email
(pmail_entity_id, pmail_id, pmail_address, pmail_modified_date)
VALUES($1,$2,$3,$4)
RETURNING pmail_id
`

type CreateEmailParams struct {
	PmailEntityID     int32          `db:"pmail_entity_id" json:"pmailEntityId"`
	PmailID           int32          `db:"pmail_id" json:"pmailId"`
	PmailAddress      sql.NullString `db:"pmail_address" json:"pmailAddress"`
	PmailModifiedDate sql.NullTime   `db:"pmail_modified_date" json:"pmailModifiedDate"`
}

func (q *Queries) CreateEmail(ctx context.Context, arg CreateEmailParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEmail,
		arg.PmailEntityID,
		arg.PmailID,
		arg.PmailAddress,
		arg.PmailModifiedDate,
	)
	var pmail_id int32
	err := row.Scan(&pmail_id)
	return pmail_id, err
}

const createExperience = `-- name: CreateExperience :one

INSERT INTO users.users_experiences
(usex_id, usex_entity_id, usex_title, usex_profile_headline, usex_employment_type,
usex_company_name, usex_is_current, usex_start_date, usex_end_date, usex_industry,
usex_description, usex_experience_type, usex_city_id)
VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13)
RETURNING usex_id
`

type CreateExperienceParams struct {
	UsexID              int32          `db:"usex_id" json:"usexId"`
	UsexEntityID        int32          `db:"usex_entity_id" json:"usexEntityId"`
	UsexTitle           sql.NullString `db:"usex_title" json:"usexTitle"`
	UsexProfileHeadline sql.NullString `db:"usex_profile_headline" json:"usexProfileHeadline"`
	UsexEmploymentType  sql.NullString `db:"usex_employment_type" json:"usexEmploymentType"`
	UsexCompanyName     sql.NullString `db:"usex_company_name" json:"usexCompanyName"`
	UsexIsCurrent       sql.NullString `db:"usex_is_current" json:"usexIsCurrent"`
	UsexStartDate       sql.NullTime   `db:"usex_start_date" json:"usexStartDate"`
	UsexEndDate         sql.NullTime   `db:"usex_end_date" json:"usexEndDate"`
	UsexIndustry        sql.NullString `db:"usex_industry" json:"usexIndustry"`
	UsexDescription     sql.NullString `db:"usex_description" json:"usexDescription"`
	UsexExperienceType  sql.NullString `db:"usex_experience_type" json:"usexExperienceType"`
	UsexCityID          sql.NullInt32  `db:"usex_city_id" json:"usexCityId"`
}

func (q *Queries) CreateExperience(ctx context.Context, arg CreateExperienceParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createExperience,
		arg.UsexID,
		arg.UsexEntityID,
		arg.UsexTitle,
		arg.UsexProfileHeadline,
		arg.UsexEmploymentType,
		arg.UsexCompanyName,
		arg.UsexIsCurrent,
		arg.UsexStartDate,
		arg.UsexEndDate,
		arg.UsexIndustry,
		arg.UsexDescription,
		arg.UsexExperienceType,
		arg.UsexCityID,
	)
	var usex_id int32
	err := row.Scan(&usex_id)
	return usex_id, err
}

const createExperienceSkill = `-- name: CreateExperienceSkill :one

INSERT INTO users.users_experiences_skill
(uesk_usex_id, uesk_uski_id)
VALUES($1,$2)
RETURNING uesk_usex_id
`

type CreateExperienceSkillParams struct {
	UeskUsexID int32 `db:"uesk_usex_id" json:"ueskUsexId"`
	UeskUskiID int32 `db:"uesk_uski_id" json:"ueskUskiId"`
}

func (q *Queries) CreateExperienceSkill(ctx context.Context, arg CreateExperienceSkillParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createExperienceSkill, arg.UeskUsexID, arg.UeskUskiID)
	var uesk_usex_id int32
	err := row.Scan(&uesk_usex_id)
	return uesk_usex_id, err
}

const createLicense = `-- name: CreateLicense :one

INSERT INTO users.users_license
(usli_id, usli_license_code, usli_modified_date, usli_status, usli_entity_id)
VALUES($1,$2,$3,$4,$5)
RETURNING usli_id
`

type CreateLicenseParams struct {
	UsliID           int32          `db:"usli_id" json:"usliId"`
	UsliLicenseCode  sql.NullString `db:"usli_license_code" json:"usliLicenseCode"`
	UsliModifiedDate sql.NullTime   `db:"usli_modified_date" json:"usliModifiedDate"`
	UsliStatus       sql.NullString `db:"usli_status" json:"usliStatus"`
	UsliEntityID     int32          `db:"usli_entity_id" json:"usliEntityId"`
}

func (q *Queries) CreateLicense(ctx context.Context, arg CreateLicenseParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createLicense,
		arg.UsliID,
		arg.UsliLicenseCode,
		arg.UsliModifiedDate,
		arg.UsliStatus,
		arg.UsliEntityID,
	)
	var usli_id int32
	err := row.Scan(&usli_id)
	return usli_id, err
}

const createMedia = `-- name: CreateMedia :one

INSERT INTO users.users_media
(usme_id, usme_entity_id, usme_file_link, usme_filename,
usme_filesize, usme_filetype, usme_note, usme_modified_date)
VALUES($1,$2,$3,$4,$5,$6,$7,$8)
RETURNING usme_id
`

type CreateMediaParams struct {
	UsmeID           int32          `db:"usme_id" json:"usmeId"`
	UsmeEntityID     int32          `db:"usme_entity_id" json:"usmeEntityId"`
	UsmeFileLink     sql.NullString `db:"usme_file_link" json:"usmeFileLink"`
	UsmeFilename     sql.NullString `db:"usme_filename" json:"usmeFilename"`
	UsmeFilesize     sql.NullInt32  `db:"usme_filesize" json:"usmeFilesize"`
	UsmeFiletype     sql.NullString `db:"usme_filetype" json:"usmeFiletype"`
	UsmeNote         sql.NullString `db:"usme_note" json:"usmeNote"`
	UsmeModifiedDate sql.NullTime   `db:"usme_modified_date" json:"usmeModifiedDate"`
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createMedia,
		arg.UsmeID,
		arg.UsmeEntityID,
		arg.UsmeFileLink,
		arg.UsmeFilename,
		arg.UsmeFilesize,
		arg.UsmeFiletype,
		arg.UsmeNote,
		arg.UsmeModifiedDate,
	)
	var usme_id int32
	err := row.Scan(&usme_id)
	return usme_id, err
}

const createPhones = `-- name: CreatePhones :one

INSERT INTO users.users_phones
(uspo_entity_id, uspo_number, uspo_modified_date, uspo_ponty_code)
VALUES($1,$2,$3,$4)
RETURNING uspo_entity_id
`

type CreatePhonesParams struct {
	UspoEntityID     int32          `db:"uspo_entity_id" json:"uspoEntityId"`
	UspoNumber       string         `db:"uspo_number" json:"uspoNumber"`
	UspoModifiedDate sql.NullTime   `db:"uspo_modified_date" json:"uspoModifiedDate"`
	UspoPontyCode    sql.NullString `db:"uspo_ponty_code" json:"uspoPontyCode"`
}

func (q *Queries) CreatePhones(ctx context.Context, arg CreatePhonesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPhones,
		arg.UspoEntityID,
		arg.UspoNumber,
		arg.UspoModifiedDate,
		arg.UspoPontyCode,
	)
	var uspo_entity_id int32
	err := row.Scan(&uspo_entity_id)
	return uspo_entity_id, err
}

const createRoles = `-- name: CreateRoles :one

INSERT INTO users.roles 
(role_id, role_name, role_type, role_modified_date)
VALUES($1,$2,$3,$4)
RETURNING role_id
`

type CreateRolesParams struct {
	RoleID           int32          `db:"role_id" json:"roleId"`
	RoleName         sql.NullString `db:"role_name" json:"roleName"`
	RoleType         sql.NullString `db:"role_type" json:"roleType"`
	RoleModifiedDate sql.NullTime   `db:"role_modified_date" json:"roleModifiedDate"`
}

func (q *Queries) CreateRoles(ctx context.Context, arg CreateRolesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createRoles,
		arg.RoleID,
		arg.RoleName,
		arg.RoleType,
		arg.RoleModifiedDate,
	)
	var role_id int32
	err := row.Scan(&role_id)
	return role_id, err
}

const createSkill = `-- name: CreateSkill :one

INSERT INTO users.users_skill
(uski_id, uski_entity_id, uski_modified_date, uski_skty_name)
VALUES($1,$2,$3,$4)
RETURNING uski_id
`

type CreateSkillParams struct {
	UskiID           int32          `db:"uski_id" json:"uskiId"`
	UskiEntityID     int32          `db:"uski_entity_id" json:"uskiEntityId"`
	UskiModifiedDate sql.NullTime   `db:"uski_modified_date" json:"uskiModifiedDate"`
	UskiSktyName     sql.NullString `db:"uski_skty_name" json:"uskiSktyName"`
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSkill,
		arg.UskiID,
		arg.UskiEntityID,
		arg.UskiModifiedDate,
		arg.UskiSktyName,
	)
	var uski_id int32
	err := row.Scan(&uski_id)
	return uski_id, err
}

const createUsers = `-- name: CreateUsers :one

INSERT INTO users.users 
(user_entity_id, user_name, user_password, user_first_name, 
user_last_name, user_birth_date, user_email_promotion, user_demographic, 
user_modified_date, user_photo, user_current_role)
VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11)
RETURNING user_entity_id
`

type CreateUsersParams struct {
	UserEntityID       int32                 `db:"user_entity_id" json:"userEntityId"`
	UserName           sql.NullString        `db:"user_name" json:"userName"`
	UserPassword       sql.NullString        `db:"user_password" json:"userPassword"`
	UserFirstName      sql.NullString        `db:"user_first_name" json:"userFirstName"`
	UserLastName       sql.NullString        `db:"user_last_name" json:"userLastName"`
	UserBirthDate      sql.NullTime          `db:"user_birth_date" json:"userBirthDate"`
	UserEmailPromotion sql.NullInt32         `db:"user_email_promotion" json:"userEmailPromotion"`
	UserDemographic    pqtype.NullRawMessage `db:"user_demographic" json:"userDemographic"`
	UserModifiedDate   sql.NullTime          `db:"user_modified_date" json:"userModifiedDate"`
	UserPhoto          sql.NullString        `db:"user_photo" json:"userPhoto"`
	UserCurrentRole    sql.NullInt32         `db:"user_current_role" json:"userCurrentRole"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUsers,
		arg.UserEntityID,
		arg.UserName,
		arg.UserPassword,
		arg.UserFirstName,
		arg.UserLastName,
		arg.UserBirthDate,
		arg.UserEmailPromotion,
		arg.UserDemographic,
		arg.UserModifiedDate,
		arg.UserPhoto,
		arg.UserCurrentRole,
	)
	var user_entity_id int32
	err := row.Scan(&user_entity_id)
	return user_entity_id, err
}

const createUsersPhoneNumberType = `-- name: CreateUsersPhoneNumberType :one

INSERT INTO users.phone_number_type
(ponty_code, ponty_modified_date)
VALUES($1,$2)
RETURNING ponty_code
`

type CreateUsersPhoneNumberTypeParams struct {
	PontyCode         string       `db:"ponty_code" json:"pontyCode"`
	PontyModifiedDate sql.NullTime `db:"ponty_modified_date" json:"pontyModifiedDate"`
}

func (q *Queries) CreateUsersPhoneNumberType(ctx context.Context, arg CreateUsersPhoneNumberTypeParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUsersPhoneNumberType, arg.PontyCode, arg.PontyModifiedDate)
	var ponty_code string
	err := row.Scan(&ponty_code)
	return ponty_code, err
}

const createUsersRoles = `-- name: CreateUsersRoles :one

INSERT INTO users.users_roles
(usro_entity_id, usro_role_id, usro_modified_date)
VALUES($1,$2,$3)
RETURNING usro_entity_id
`

type CreateUsersRolesParams struct {
	UsroEntityID     int32        `db:"usro_entity_id" json:"usroEntityId"`
	UsroRoleID       int32        `db:"usro_role_id" json:"usroRoleId"`
	UsroModifiedDate sql.NullTime `db:"usro_modified_date" json:"usroModifiedDate"`
}

func (q *Queries) CreateUsersRoles(ctx context.Context, arg CreateUsersRolesParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUsersRoles, arg.UsroEntityID, arg.UsroRoleID, arg.UsroModifiedDate)
	var usro_entity_id int32
	err := row.Scan(&usro_entity_id)
	return usro_entity_id, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM users.users_address
WHERE etad_addr_id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, etadAddrID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, etadAddrID)
	return err
}

const deleteBusinessEntity = `-- name: DeleteBusinessEntity :exec
DELETE FROM users.business_entity
WHERE entity_id = $1
`

func (q *Queries) DeleteBusinessEntity(ctx context.Context, entityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBusinessEntity, entityID)
	return err
}

const deleteEducation = `-- name: DeleteEducation :exec
DELETE FROM users.users_education
WHERE usdu_id = $1
`

func (q *Queries) DeleteEducation(ctx context.Context, usduID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEducation, usduID)
	return err
}

const deleteEmail = `-- name: DeleteEmail :exec
DELETE FROM users.users_email
WHERE pmail_id = $1
`

func (q *Queries) DeleteEmail(ctx context.Context, pmailID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmail, pmailID)
	return err
}

const deleteExperience = `-- name: DeleteExperience :exec
DELETE FROM users.users_experiences
WHERE usex_id = $1
`

func (q *Queries) DeleteExperience(ctx context.Context, usexID int32) error {
	_, err := q.db.ExecContext(ctx, deleteExperience, usexID)
	return err
}

const deleteExperienceSkill = `-- name: DeleteExperienceSkill :exec
DELETE FROM users.users_experiences_skill
WHERE uesk_usex_id = $1
`

func (q *Queries) DeleteExperienceSkill(ctx context.Context, ueskUsexID int32) error {
	_, err := q.db.ExecContext(ctx, deleteExperienceSkill, ueskUsexID)
	return err
}

const deleteLicense = `-- name: DeleteLicense :exec
DELETE FROM users.users_license
WHERE usli_id = $1
`

func (q *Queries) DeleteLicense(ctx context.Context, usliID int32) error {
	_, err := q.db.ExecContext(ctx, deleteLicense, usliID)
	return err
}

const deleteMedia = `-- name: DeleteMedia :exec
DELETE FROM users.users_media
WHERE usme_id = $1
`

func (q *Queries) DeleteMedia(ctx context.Context, usmeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMedia, usmeID)
	return err
}

const deletePhones = `-- name: DeletePhones :exec
DELETE FROM users.users_phones
WHERE uspo_entity_id = $1
`

func (q *Queries) DeletePhones(ctx context.Context, uspoEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deletePhones, uspoEntityID)
	return err
}

const deleteRoles = `-- name: DeleteRoles :exec
DELETE FROM users.roles
WHERE role_id = $1
`

func (q *Queries) DeleteRoles(ctx context.Context, roleID int32) error {
	_, err := q.db.ExecContext(ctx, deleteRoles, roleID)
	return err
}

const deleteSkill = `-- name: DeleteSkill :exec
DELETE FROM users.users_skill
WHERE uski_id = $1
`

func (q *Queries) DeleteSkill(ctx context.Context, uskiID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSkill, uskiID)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users.users
WHERE user_entity_id = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, userEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUsers, userEntityID)
	return err
}

const deleteUsersPhoneNumberType = `-- name: DeleteUsersPhoneNumberType :exec
DELETE FROM users.phone_number_type
WHERE ponty_code = $1
`

func (q *Queries) DeleteUsersPhoneNumberType(ctx context.Context, pontyCode string) error {
	_, err := q.db.ExecContext(ctx, deleteUsersPhoneNumberType, pontyCode)
	return err
}

const deleteUsersRoles = `-- name: DeleteUsersRoles :exec
DELETE FROM users.users_roles
WHERE usro_entity_id = $1
`

func (q *Queries) DeleteUsersRoles(ctx context.Context, usroEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUsersRoles, usroEntityID)
	return err
}

const getAddress = `-- name: GetAddress :one

SELECT etad_addr_id, etad_modified_date, etad_entity_id, etad_adty_id FROM users.users_address
WHERE etad_addr_id = $1
`

// Users Addrress
func (q *Queries) GetAddress(ctx context.Context, etadAddrID int32) (UsersUsersAddress, error) {
	row := q.db.QueryRowContext(ctx, getAddress, etadAddrID)
	var i UsersUsersAddress
	err := row.Scan(
		&i.EtadAddrID,
		&i.EtadModifiedDate,
		&i.EtadEntityID,
		&i.EtadAdtyID,
	)
	return i, err
}

const getBusinessEntity = `-- name: GetBusinessEntity :one
SELECT entity_id FROM users.business_entity
WHERE entity_id = $1
`

func (q *Queries) GetBusinessEntity(ctx context.Context, entityID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getBusinessEntity, entityID)
	var entity_id int32
	err := row.Scan(&entity_id)
	return entity_id, err
}

const getEducation = `-- name: GetEducation :one

SELECT usdu_id, usdu_entity_id, usdu_school, usdu_degree, usdu_field_study, usdu_graduate_year, usdu_start_date, usdu_end_date, usdu_grade, usdu_activities, usdu_description, usdu_modified_date FROM users.users_education
WHERE usdu_id = $1
`

// Users Education
func (q *Queries) GetEducation(ctx context.Context, usduID int32) (UsersUsersEducation, error) {
	row := q.db.QueryRowContext(ctx, getEducation, usduID)
	var i UsersUsersEducation
	err := row.Scan(
		&i.UsduID,
		&i.UsduEntityID,
		&i.UsduSchool,
		&i.UsduDegree,
		&i.UsduFieldStudy,
		&i.UsduGraduateYear,
		&i.UsduStartDate,
		&i.UsduEndDate,
		&i.UsduGrade,
		&i.UsduActivities,
		&i.UsduDescription,
		&i.UsduModifiedDate,
	)
	return i, err
}

const getEmail = `-- name: GetEmail :one

SELECT pmail_entity_id, pmail_id, pmail_address, pmail_modified_date FROM users.users_email
WHERE pmail_id = $1
`

// Users Email
func (q *Queries) GetEmail(ctx context.Context, pmailID int32) (UsersUsersEmail, error) {
	row := q.db.QueryRowContext(ctx, getEmail, pmailID)
	var i UsersUsersEmail
	err := row.Scan(
		&i.PmailEntityID,
		&i.PmailID,
		&i.PmailAddress,
		&i.PmailModifiedDate,
	)
	return i, err
}

const getExperience = `-- name: GetExperience :one

SELECT usex_id, usex_entity_id, usex_title, usex_profile_headline, usex_employment_type, usex_company_name, usex_is_current, usex_start_date, usex_end_date, usex_industry, usex_description, usex_experience_type, usex_city_id FROM users.users_experiences
WHERE usex_id = $1
`

// Users Experience
func (q *Queries) GetExperience(ctx context.Context, usexID int32) (UsersUsersExperience, error) {
	row := q.db.QueryRowContext(ctx, getExperience, usexID)
	var i UsersUsersExperience
	err := row.Scan(
		&i.UsexID,
		&i.UsexEntityID,
		&i.UsexTitle,
		&i.UsexProfileHeadline,
		&i.UsexEmploymentType,
		&i.UsexCompanyName,
		&i.UsexIsCurrent,
		&i.UsexStartDate,
		&i.UsexEndDate,
		&i.UsexIndustry,
		&i.UsexDescription,
		&i.UsexExperienceType,
		&i.UsexCityID,
	)
	return i, err
}

const getExperienceSkill = `-- name: GetExperienceSkill :one

SELECT uesk_usex_id, uesk_uski_id FROM users.users_experiences_skill
WHERE uesk_usex_id = $1
`

// Users Experience Skill
func (q *Queries) GetExperienceSkill(ctx context.Context, ueskUsexID int32) (UsersUsersExperiencesSkill, error) {
	row := q.db.QueryRowContext(ctx, getExperienceSkill, ueskUsexID)
	var i UsersUsersExperiencesSkill
	err := row.Scan(&i.UeskUsexID, &i.UeskUskiID)
	return i, err
}

const getLicense = `-- name: GetLicense :one

SELECT usli_id, usli_license_code, usli_modified_date, usli_status, usli_entity_id FROM users.users_license
WHERE usli_id = $1
`

// Users License
func (q *Queries) GetLicense(ctx context.Context, usliID int32) (UsersUsersLicense, error) {
	row := q.db.QueryRowContext(ctx, getLicense, usliID)
	var i UsersUsersLicense
	err := row.Scan(
		&i.UsliID,
		&i.UsliLicenseCode,
		&i.UsliModifiedDate,
		&i.UsliStatus,
		&i.UsliEntityID,
	)
	return i, err
}

const getMedia = `-- name: GetMedia :one

SELECT usme_id, usme_entity_id, usme_file_link, usme_filename, usme_filesize, usme_filetype, usme_note, usme_modified_date FROM users.users_media
WHERE usme_id = $1
`

// Users Media
func (q *Queries) GetMedia(ctx context.Context, usmeID int32) (UsersUsersMedium, error) {
	row := q.db.QueryRowContext(ctx, getMedia, usmeID)
	var i UsersUsersMedium
	err := row.Scan(
		&i.UsmeID,
		&i.UsmeEntityID,
		&i.UsmeFileLink,
		&i.UsmeFilename,
		&i.UsmeFilesize,
		&i.UsmeFiletype,
		&i.UsmeNote,
		&i.UsmeModifiedDate,
	)
	return i, err
}

const getPhones = `-- name: GetPhones :one

SELECT uspo_entity_id, uspo_number, uspo_modified_date, uspo_ponty_code FROM users.users_phones
WHERE uspo_entity_id = $1
`

// Users Phones
func (q *Queries) GetPhones(ctx context.Context, uspoEntityID int32) (UsersUsersPhone, error) {
	row := q.db.QueryRowContext(ctx, getPhones, uspoEntityID)
	var i UsersUsersPhone
	err := row.Scan(
		&i.UspoEntityID,
		&i.UspoNumber,
		&i.UspoModifiedDate,
		&i.UspoPontyCode,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :one

SELECT role_id, role_name, role_type, role_modified_date FROM users.roles
WHERE role_id = $1
`

// roles
func (q *Queries) GetRoles(ctx context.Context, roleID int32) (UsersRole, error) {
	row := q.db.QueryRowContext(ctx, getRoles, roleID)
	var i UsersRole
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.RoleType,
		&i.RoleModifiedDate,
	)
	return i, err
}

const getSkill = `-- name: GetSkill :one

SELECT uski_id, uski_entity_id, uski_modified_date, uski_skty_name FROM users.users_skill
WHERE uski_id = $1
`

// Users Skill
func (q *Queries) GetSkill(ctx context.Context, uskiID int32) (UsersUsersSkill, error) {
	row := q.db.QueryRowContext(ctx, getSkill, uskiID)
	var i UsersUsersSkill
	err := row.Scan(
		&i.UskiID,
		&i.UskiEntityID,
		&i.UskiModifiedDate,
		&i.UskiSktyName,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one

SELECT user_entity_id, user_name, user_password, user_first_name, user_last_name, user_birth_date, user_email_promotion, user_demographic, user_modified_date, user_photo, user_current_role FROM users.users
WHERE user_entity_id = $1
`

// users
func (q *Queries) GetUsers(ctx context.Context, userEntityID int32) (UsersUser, error) {
	row := q.db.QueryRowContext(ctx, getUsers, userEntityID)
	var i UsersUser
	err := row.Scan(
		&i.UserEntityID,
		&i.UserName,
		&i.UserPassword,
		&i.UserFirstName,
		&i.UserLastName,
		&i.UserBirthDate,
		&i.UserEmailPromotion,
		&i.UserDemographic,
		&i.UserModifiedDate,
		&i.UserPhoto,
		&i.UserCurrentRole,
	)
	return i, err
}

const getUsersPhoneNumberType = `-- name: GetUsersPhoneNumberType :one

SELECT ponty_code, ponty_modified_date FROM users.phone_number_type
WHERE ponty_code = $1
`

// Users Phone Number Type
func (q *Queries) GetUsersPhoneNumberType(ctx context.Context, pontyCode string) (UsersPhoneNumberType, error) {
	row := q.db.QueryRowContext(ctx, getUsersPhoneNumberType, pontyCode)
	var i UsersPhoneNumberType
	err := row.Scan(&i.PontyCode, &i.PontyModifiedDate)
	return i, err
}

const getUsersRoles = `-- name: GetUsersRoles :one

SELECT usro_entity_id, usro_role_id, usro_modified_date FROM users.users_roles
WHERE usro_entity_id = $1
`

// users_roles
func (q *Queries) GetUsersRoles(ctx context.Context, usroEntityID int32) (UsersUsersRole, error) {
	row := q.db.QueryRowContext(ctx, getUsersRoles, usroEntityID)
	var i UsersUsersRole
	err := row.Scan(&i.UsroEntityID, &i.UsroRoleID, &i.UsroModifiedDate)
	return i, err
}

const listAddress = `-- name: ListAddress :many
SELECT etad_addr_id, etad_modified_date, etad_entity_id, etad_adty_id FROM users.users_address
ORDER BY etad_modified_date
`

func (q *Queries) ListAddress(ctx context.Context) ([]UsersUsersAddress, error) {
	rows, err := q.db.QueryContext(ctx, listAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersAddress
	for rows.Next() {
		var i UsersUsersAddress
		if err := rows.Scan(
			&i.EtadAddrID,
			&i.EtadModifiedDate,
			&i.EtadEntityID,
			&i.EtadAdtyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBusinessEntity = `-- name: ListBusinessEntity :many
SELECT entity_id FROM users.business_entity
ORDER BY entity_id
`

func (q *Queries) ListBusinessEntity(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, listBusinessEntity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var entity_id int32
		if err := rows.Scan(&entity_id); err != nil {
			return nil, err
		}
		items = append(items, entity_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEducation = `-- name: ListEducation :many
SELECT usdu_id, usdu_entity_id, usdu_school, usdu_degree, usdu_field_study, usdu_graduate_year, usdu_start_date, usdu_end_date, usdu_grade, usdu_activities, usdu_description, usdu_modified_date FROM users.users_education
ORDER BY usdu_entity_id
`

func (q *Queries) ListEducation(ctx context.Context) ([]UsersUsersEducation, error) {
	rows, err := q.db.QueryContext(ctx, listEducation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersEducation
	for rows.Next() {
		var i UsersUsersEducation
		if err := rows.Scan(
			&i.UsduID,
			&i.UsduEntityID,
			&i.UsduSchool,
			&i.UsduDegree,
			&i.UsduFieldStudy,
			&i.UsduGraduateYear,
			&i.UsduStartDate,
			&i.UsduEndDate,
			&i.UsduGrade,
			&i.UsduActivities,
			&i.UsduDescription,
			&i.UsduModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmail = `-- name: ListEmail :many
SELECT pmail_entity_id, pmail_id, pmail_address, pmail_modified_date FROM users.users_email
ORDER BY pmail_id
`

func (q *Queries) ListEmail(ctx context.Context) ([]UsersUsersEmail, error) {
	rows, err := q.db.QueryContext(ctx, listEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersEmail
	for rows.Next() {
		var i UsersUsersEmail
		if err := rows.Scan(
			&i.PmailEntityID,
			&i.PmailID,
			&i.PmailAddress,
			&i.PmailModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExperience = `-- name: ListExperience :many
SELECT usex_id, usex_entity_id, usex_title, usex_profile_headline, usex_employment_type, usex_company_name, usex_is_current, usex_start_date, usex_end_date, usex_industry, usex_description, usex_experience_type, usex_city_id FROM users.users_experiences
ORDER BY usex_title
`

func (q *Queries) ListExperience(ctx context.Context) ([]UsersUsersExperience, error) {
	rows, err := q.db.QueryContext(ctx, listExperience)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersExperience
	for rows.Next() {
		var i UsersUsersExperience
		if err := rows.Scan(
			&i.UsexID,
			&i.UsexEntityID,
			&i.UsexTitle,
			&i.UsexProfileHeadline,
			&i.UsexEmploymentType,
			&i.UsexCompanyName,
			&i.UsexIsCurrent,
			&i.UsexStartDate,
			&i.UsexEndDate,
			&i.UsexIndustry,
			&i.UsexDescription,
			&i.UsexExperienceType,
			&i.UsexCityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExperienceSkill = `-- name: ListExperienceSkill :many
SELECT uesk_usex_id, uesk_uski_id FROM users.users_experiences_skill
ORDER BY uesk_usex_id
`

func (q *Queries) ListExperienceSkill(ctx context.Context) ([]UsersUsersExperiencesSkill, error) {
	rows, err := q.db.QueryContext(ctx, listExperienceSkill)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersExperiencesSkill
	for rows.Next() {
		var i UsersUsersExperiencesSkill
		if err := rows.Scan(&i.UeskUsexID, &i.UeskUskiID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLicense = `-- name: ListLicense :many
SELECT usli_id, usli_license_code, usli_modified_date, usli_status, usli_entity_id FROM users.users_license
ORDER BY usli_id
`

func (q *Queries) ListLicense(ctx context.Context) ([]UsersUsersLicense, error) {
	rows, err := q.db.QueryContext(ctx, listLicense)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersLicense
	for rows.Next() {
		var i UsersUsersLicense
		if err := rows.Scan(
			&i.UsliID,
			&i.UsliLicenseCode,
			&i.UsliModifiedDate,
			&i.UsliStatus,
			&i.UsliEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMedia = `-- name: ListMedia :many
SELECT usme_id, usme_entity_id, usme_file_link, usme_filename, usme_filesize, usme_filetype, usme_note, usme_modified_date FROM users.users_media
ORDER BY usme_id
`

func (q *Queries) ListMedia(ctx context.Context) ([]UsersUsersMedium, error) {
	rows, err := q.db.QueryContext(ctx, listMedia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersMedium
	for rows.Next() {
		var i UsersUsersMedium
		if err := rows.Scan(
			&i.UsmeID,
			&i.UsmeEntityID,
			&i.UsmeFileLink,
			&i.UsmeFilename,
			&i.UsmeFilesize,
			&i.UsmeFiletype,
			&i.UsmeNote,
			&i.UsmeModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPhones = `-- name: ListPhones :many
SELECT uspo_entity_id, uspo_number, uspo_modified_date, uspo_ponty_code FROM users.users_phones
ORDER BY uspo_entity_id
`

func (q *Queries) ListPhones(ctx context.Context) ([]UsersUsersPhone, error) {
	rows, err := q.db.QueryContext(ctx, listPhones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersPhone
	for rows.Next() {
		var i UsersUsersPhone
		if err := rows.Scan(
			&i.UspoEntityID,
			&i.UspoNumber,
			&i.UspoModifiedDate,
			&i.UspoPontyCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoles = `-- name: ListRoles :many
SELECT role_id, role_name, role_type, role_modified_date FROM users.roles
ORDER BY role_name
`

func (q *Queries) ListRoles(ctx context.Context) ([]UsersRole, error) {
	rows, err := q.db.QueryContext(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersRole
	for rows.Next() {
		var i UsersRole
		if err := rows.Scan(
			&i.RoleID,
			&i.RoleName,
			&i.RoleType,
			&i.RoleModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSkill = `-- name: ListSkill :many
SELECT uski_id, uski_entity_id, uski_modified_date, uski_skty_name FROM users.users_skill
ORDER BY uski_id
`

func (q *Queries) ListSkill(ctx context.Context) ([]UsersUsersSkill, error) {
	rows, err := q.db.QueryContext(ctx, listSkill)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersSkill
	for rows.Next() {
		var i UsersUsersSkill
		if err := rows.Scan(
			&i.UskiID,
			&i.UskiEntityID,
			&i.UskiModifiedDate,
			&i.UskiSktyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT user_entity_id, user_name, user_password, user_first_name, user_last_name, user_birth_date, user_email_promotion, user_demographic, user_modified_date, user_photo, user_current_role FROM users.users
ORDER BY user_name
`

func (q *Queries) ListUsers(ctx context.Context) ([]UsersUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUser
	for rows.Next() {
		var i UsersUser
		if err := rows.Scan(
			&i.UserEntityID,
			&i.UserName,
			&i.UserPassword,
			&i.UserFirstName,
			&i.UserLastName,
			&i.UserBirthDate,
			&i.UserEmailPromotion,
			&i.UserDemographic,
			&i.UserModifiedDate,
			&i.UserPhoto,
			&i.UserCurrentRole,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersPhoneNumberType = `-- name: ListUsersPhoneNumberType :many
SELECT ponty_code, ponty_modified_date FROM users.phone_number_type
ORDER BY ponty_modified_date
`

func (q *Queries) ListUsersPhoneNumberType(ctx context.Context) ([]UsersPhoneNumberType, error) {
	rows, err := q.db.QueryContext(ctx, listUsersPhoneNumberType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersPhoneNumberType
	for rows.Next() {
		var i UsersPhoneNumberType
		if err := rows.Scan(&i.PontyCode, &i.PontyModifiedDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersRoles = `-- name: ListUsersRoles :many
SELECT usro_entity_id, usro_role_id, usro_modified_date FROM users.users_roles
ORDER BY usro_modified_date
`

func (q *Queries) ListUsersRoles(ctx context.Context) ([]UsersUsersRole, error) {
	rows, err := q.db.QueryContext(ctx, listUsersRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UsersUsersRole
	for rows.Next() {
		var i UsersUsersRole
		if err := rows.Scan(&i.UsroEntityID, &i.UsroRoleID, &i.UsroModifiedDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :exec
UPDATE users.users_address
  set etad_modified_date = $2,
  etad_entity_id = $3,
  etad_adty_id = $4
WHERE etad_addr_id = $1
`

type UpdateAddressParams struct {
	EtadAddrID       int32         `db:"etad_addr_id" json:"etadAddrId"`
	EtadModifiedDate sql.NullTime  `db:"etad_modified_date" json:"etadModifiedDate"`
	EtadEntityID     sql.NullInt32 `db:"etad_entity_id" json:"etadEntityId"`
	EtadAdtyID       sql.NullInt32 `db:"etad_adty_id" json:"etadAdtyId"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateAddress,
		arg.EtadAddrID,
		arg.EtadModifiedDate,
		arg.EtadEntityID,
		arg.EtadAdtyID,
	)
	return err
}

const updateEducation = `-- name: UpdateEducation :exec
UPDATE users.users_education
  set usdu_entity_id = $2,
  usdu_school = $3,
  usdu_degree = $4,
  usdu_field_study = $5,
  usdu_graduate_year = $6,
  usdu_start_date = $7,
  usdu_end_date = $8,
  usdu_grade = $9,
  usdu_activities = $10,
  usdu_description = $11,
  usdu_modified_date = $12
WHERE usdu_id = $1
`

type UpdateEducationParams struct {
	UsduID           int32          `db:"usdu_id" json:"usduId"`
	UsduEntityID     int32          `db:"usdu_entity_id" json:"usduEntityId"`
	UsduSchool       sql.NullString `db:"usdu_school" json:"usduSchool"`
	UsduDegree       sql.NullString `db:"usdu_degree" json:"usduDegree"`
	UsduFieldStudy   sql.NullString `db:"usdu_field_study" json:"usduFieldStudy"`
	UsduGraduateYear sql.NullString `db:"usdu_graduate_year" json:"usduGraduateYear"`
	UsduStartDate    sql.NullTime   `db:"usdu_start_date" json:"usduStartDate"`
	UsduEndDate      sql.NullTime   `db:"usdu_end_date" json:"usduEndDate"`
	UsduGrade        sql.NullString `db:"usdu_grade" json:"usduGrade"`
	UsduActivities   sql.NullString `db:"usdu_activities" json:"usduActivities"`
	UsduDescription  sql.NullString `db:"usdu_description" json:"usduDescription"`
	UsduModifiedDate sql.NullTime   `db:"usdu_modified_date" json:"usduModifiedDate"`
}

func (q *Queries) UpdateEducation(ctx context.Context, arg UpdateEducationParams) error {
	_, err := q.db.ExecContext(ctx, updateEducation,
		arg.UsduID,
		arg.UsduEntityID,
		arg.UsduSchool,
		arg.UsduDegree,
		arg.UsduFieldStudy,
		arg.UsduGraduateYear,
		arg.UsduStartDate,
		arg.UsduEndDate,
		arg.UsduGrade,
		arg.UsduActivities,
		arg.UsduDescription,
		arg.UsduModifiedDate,
	)
	return err
}

const updateEmail = `-- name: UpdateEmail :exec
UPDATE users.users_email
  set pmail_entity_id = $2,
  pmail_address   = $3,
  pmail_modified_date = $4
WHERE pmail_id = $1
`

type UpdateEmailParams struct {
	PmailID           int32          `db:"pmail_id" json:"pmailId"`
	PmailEntityID     int32          `db:"pmail_entity_id" json:"pmailEntityId"`
	PmailAddress      sql.NullString `db:"pmail_address" json:"pmailAddress"`
	PmailModifiedDate sql.NullTime   `db:"pmail_modified_date" json:"pmailModifiedDate"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail,
		arg.PmailID,
		arg.PmailEntityID,
		arg.PmailAddress,
		arg.PmailModifiedDate,
	)
	return err
}

const updateExperience = `-- name: UpdateExperience :exec
UPDATE users.users_experiences
  set usex_entity_id = $2,
  usex_title      = $3,
  usex_profile_headline    = $4,
  usex_employment_type     = $5,
  usex_company_name        = $6,
  usex_is_current          = $7,
  usex_start_date         = $8,
  usex_end_date           = $9,
  usex_industry            = $10,
  usex_description       = $11,
  usex_experience_type     = $12,
  usex_city_id             = $13
WHERE usex_id = $1
`

type UpdateExperienceParams struct {
	UsexID              int32          `db:"usex_id" json:"usexId"`
	UsexEntityID        int32          `db:"usex_entity_id" json:"usexEntityId"`
	UsexTitle           sql.NullString `db:"usex_title" json:"usexTitle"`
	UsexProfileHeadline sql.NullString `db:"usex_profile_headline" json:"usexProfileHeadline"`
	UsexEmploymentType  sql.NullString `db:"usex_employment_type" json:"usexEmploymentType"`
	UsexCompanyName     sql.NullString `db:"usex_company_name" json:"usexCompanyName"`
	UsexIsCurrent       sql.NullString `db:"usex_is_current" json:"usexIsCurrent"`
	UsexStartDate       sql.NullTime   `db:"usex_start_date" json:"usexStartDate"`
	UsexEndDate         sql.NullTime   `db:"usex_end_date" json:"usexEndDate"`
	UsexIndustry        sql.NullString `db:"usex_industry" json:"usexIndustry"`
	UsexDescription     sql.NullString `db:"usex_description" json:"usexDescription"`
	UsexExperienceType  sql.NullString `db:"usex_experience_type" json:"usexExperienceType"`
	UsexCityID          sql.NullInt32  `db:"usex_city_id" json:"usexCityId"`
}

func (q *Queries) UpdateExperience(ctx context.Context, arg UpdateExperienceParams) error {
	_, err := q.db.ExecContext(ctx, updateExperience,
		arg.UsexID,
		arg.UsexEntityID,
		arg.UsexTitle,
		arg.UsexProfileHeadline,
		arg.UsexEmploymentType,
		arg.UsexCompanyName,
		arg.UsexIsCurrent,
		arg.UsexStartDate,
		arg.UsexEndDate,
		arg.UsexIndustry,
		arg.UsexDescription,
		arg.UsexExperienceType,
		arg.UsexCityID,
	)
	return err
}

const updateExperienceSkill = `-- name: UpdateExperienceSkill :exec
UPDATE users.users_experiences_skill
  set uesk_uski_id = $2
WHERE uesk_usex_id = $1
`

type UpdateExperienceSkillParams struct {
	UeskUsexID int32 `db:"uesk_usex_id" json:"ueskUsexId"`
	UeskUskiID int32 `db:"uesk_uski_id" json:"ueskUskiId"`
}

func (q *Queries) UpdateExperienceSkill(ctx context.Context, arg UpdateExperienceSkillParams) error {
	_, err := q.db.ExecContext(ctx, updateExperienceSkill, arg.UeskUsexID, arg.UeskUskiID)
	return err
}

const updateLicense = `-- name: UpdateLicense :exec
UPDATE users.users_license
  set usli_license_code = $2,
  usli_modified_date = $3,
  usli_status = $4,
  usli_entity_id = $5
WHERE usli_id = $1
`

type UpdateLicenseParams struct {
	UsliID           int32          `db:"usli_id" json:"usliId"`
	UsliLicenseCode  sql.NullString `db:"usli_license_code" json:"usliLicenseCode"`
	UsliModifiedDate sql.NullTime   `db:"usli_modified_date" json:"usliModifiedDate"`
	UsliStatus       sql.NullString `db:"usli_status" json:"usliStatus"`
	UsliEntityID     int32          `db:"usli_entity_id" json:"usliEntityId"`
}

func (q *Queries) UpdateLicense(ctx context.Context, arg UpdateLicenseParams) error {
	_, err := q.db.ExecContext(ctx, updateLicense,
		arg.UsliID,
		arg.UsliLicenseCode,
		arg.UsliModifiedDate,
		arg.UsliStatus,
		arg.UsliEntityID,
	)
	return err
}

const updateMedia = `-- name: UpdateMedia :exec
UPDATE users.users_media
  set usme_entity_id = $2,
  usme_file_link = $3,
  usme_filename = $4,
  usme_filesize = $5,
  usme_filetype = $6,
  usme_note = $7,
  usme_modified_date = $8
WHERE usme_id = $1
`

type UpdateMediaParams struct {
	UsmeID           int32          `db:"usme_id" json:"usmeId"`
	UsmeEntityID     int32          `db:"usme_entity_id" json:"usmeEntityId"`
	UsmeFileLink     sql.NullString `db:"usme_file_link" json:"usmeFileLink"`
	UsmeFilename     sql.NullString `db:"usme_filename" json:"usmeFilename"`
	UsmeFilesize     sql.NullInt32  `db:"usme_filesize" json:"usmeFilesize"`
	UsmeFiletype     sql.NullString `db:"usme_filetype" json:"usmeFiletype"`
	UsmeNote         sql.NullString `db:"usme_note" json:"usmeNote"`
	UsmeModifiedDate sql.NullTime   `db:"usme_modified_date" json:"usmeModifiedDate"`
}

func (q *Queries) UpdateMedia(ctx context.Context, arg UpdateMediaParams) error {
	_, err := q.db.ExecContext(ctx, updateMedia,
		arg.UsmeID,
		arg.UsmeEntityID,
		arg.UsmeFileLink,
		arg.UsmeFilename,
		arg.UsmeFilesize,
		arg.UsmeFiletype,
		arg.UsmeNote,
		arg.UsmeModifiedDate,
	)
	return err
}

const updatePhones = `-- name: UpdatePhones :exec
UPDATE users.users_phones
  set uspo_number = $2,
  uspo_modified_date = $3,
  uspo_ponty_code=$4
WHERE uspo_entity_id = $1
`

type UpdatePhonesParams struct {
	UspoEntityID     int32          `db:"uspo_entity_id" json:"uspoEntityId"`
	UspoNumber       string         `db:"uspo_number" json:"uspoNumber"`
	UspoModifiedDate sql.NullTime   `db:"uspo_modified_date" json:"uspoModifiedDate"`
	UspoPontyCode    sql.NullString `db:"uspo_ponty_code" json:"uspoPontyCode"`
}

func (q *Queries) UpdatePhones(ctx context.Context, arg UpdatePhonesParams) error {
	_, err := q.db.ExecContext(ctx, updatePhones,
		arg.UspoEntityID,
		arg.UspoNumber,
		arg.UspoModifiedDate,
		arg.UspoPontyCode,
	)
	return err
}

const updateRoles = `-- name: UpdateRoles :exec
UPDATE users.roles
  set role_name = $2,
  role_type=$3,
  role_modified_date=$4
WHERE role_id = $1
`

type UpdateRolesParams struct {
	RoleID           int32          `db:"role_id" json:"roleId"`
	RoleName         sql.NullString `db:"role_name" json:"roleName"`
	RoleType         sql.NullString `db:"role_type" json:"roleType"`
	RoleModifiedDate sql.NullTime   `db:"role_modified_date" json:"roleModifiedDate"`
}

func (q *Queries) UpdateRoles(ctx context.Context, arg UpdateRolesParams) error {
	_, err := q.db.ExecContext(ctx, updateRoles,
		arg.RoleID,
		arg.RoleName,
		arg.RoleType,
		arg.RoleModifiedDate,
	)
	return err
}

const updateSkill = `-- name: UpdateSkill :exec
UPDATE users.users_skill
  set uski_entity_id = $2,
  uski_modified_date = $3,
  uski_skty_name= $4
WHERE uski_id = $1
`

type UpdateSkillParams struct {
	UskiID           int32          `db:"uski_id" json:"uskiId"`
	UskiEntityID     int32          `db:"uski_entity_id" json:"uskiEntityId"`
	UskiModifiedDate sql.NullTime   `db:"uski_modified_date" json:"uskiModifiedDate"`
	UskiSktyName     sql.NullString `db:"uski_skty_name" json:"uskiSktyName"`
}

func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) error {
	_, err := q.db.ExecContext(ctx, updateSkill,
		arg.UskiID,
		arg.UskiEntityID,
		arg.UskiModifiedDate,
		arg.UskiSktyName,
	)
	return err
}

const updateUsers = `-- name: UpdateUsers :exec
UPDATE users.users
  set user_name = $2,
  user_password=$3,
  user_first_name= $4,
  user_last_name =$5,
  user_birth_date=$6,
  user_email_promotion=$7,
  user_demographic=$8,
  user_modified_date=$9,
  user_photo=$10,
  user_current_role=$11
WHERE user_entity_id = $1
`

type UpdateUsersParams struct {
	UserEntityID       int32                 `db:"user_entity_id" json:"userEntityId"`
	UserName           sql.NullString        `db:"user_name" json:"userName"`
	UserPassword       sql.NullString        `db:"user_password" json:"userPassword"`
	UserFirstName      sql.NullString        `db:"user_first_name" json:"userFirstName"`
	UserLastName       sql.NullString        `db:"user_last_name" json:"userLastName"`
	UserBirthDate      sql.NullTime          `db:"user_birth_date" json:"userBirthDate"`
	UserEmailPromotion sql.NullInt32         `db:"user_email_promotion" json:"userEmailPromotion"`
	UserDemographic    pqtype.NullRawMessage `db:"user_demographic" json:"userDemographic"`
	UserModifiedDate   sql.NullTime          `db:"user_modified_date" json:"userModifiedDate"`
	UserPhoto          sql.NullString        `db:"user_photo" json:"userPhoto"`
	UserCurrentRole    sql.NullInt32         `db:"user_current_role" json:"userCurrentRole"`
}

func (q *Queries) UpdateUsers(ctx context.Context, arg UpdateUsersParams) error {
	_, err := q.db.ExecContext(ctx, updateUsers,
		arg.UserEntityID,
		arg.UserName,
		arg.UserPassword,
		arg.UserFirstName,
		arg.UserLastName,
		arg.UserBirthDate,
		arg.UserEmailPromotion,
		arg.UserDemographic,
		arg.UserModifiedDate,
		arg.UserPhoto,
		arg.UserCurrentRole,
	)
	return err
}

const updateUsersPhoneNumberType = `-- name: UpdateUsersPhoneNumberType :exec
UPDATE users.phone_number_type
  set ponty_modified_date = $2
WHERE ponty_code = $1
`

type UpdateUsersPhoneNumberTypeParams struct {
	PontyCode         string       `db:"ponty_code" json:"pontyCode"`
	PontyModifiedDate sql.NullTime `db:"ponty_modified_date" json:"pontyModifiedDate"`
}

func (q *Queries) UpdateUsersPhoneNumberType(ctx context.Context, arg UpdateUsersPhoneNumberTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateUsersPhoneNumberType, arg.PontyCode, arg.PontyModifiedDate)
	return err
}

const updateUsersRoles = `-- name: UpdateUsersRoles :exec
UPDATE users.users_roles
  set usro_role_id = $2,
  usro_modified_date=$3
WHERE usro_entity_id = $1
`

type UpdateUsersRolesParams struct {
	UsroEntityID     int32        `db:"usro_entity_id" json:"usroEntityId"`
	UsroRoleID       int32        `db:"usro_role_id" json:"usroRoleId"`
	UsroModifiedDate sql.NullTime `db:"usro_modified_date" json:"usroModifiedDate"`
}

func (q *Queries) UpdateUsersRoles(ctx context.Context, arg UpdateUsersRolesParams) error {
	_, err := q.db.ExecContext(ctx, updateUsersRoles, arg.UsroEntityID, arg.UsroRoleID, arg.UsroModifiedDate)
	return err
}

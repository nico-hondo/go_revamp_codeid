// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
)

const createBatch = `-- name: CreateBatch :one
INSERT INTO bootcamp.batch
(batch_id, batch_entity_id, batch_name, batch_description, batch_start_date, batch_end_date, batch_reason, batch_type, batch_modified_date, batch_status, batch_pic_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING batch_id
`

type CreateBatchParams struct {
	BatchID           int32          `db:"batch_id" json:"batchId"`
	BatchEntityID     int32          `db:"batch_entity_id" json:"batchEntityId"`
	BatchName         sql.NullString `db:"batch_name" json:"batchName"`
	BatchDescription  sql.NullString `db:"batch_description" json:"batchDescription"`
	BatchStartDate    sql.NullTime   `db:"batch_start_date" json:"batchStartDate"`
	BatchEndDate      sql.NullTime   `db:"batch_end_date" json:"batchEndDate"`
	BatchReason       sql.NullString `db:"batch_reason" json:"batchReason"`
	BatchType         sql.NullString `db:"batch_type" json:"batchType"`
	BatchModifiedDate sql.NullTime   `db:"batch_modified_date" json:"batchModifiedDate"`
	BatchStatus       sql.NullString `db:"batch_status" json:"batchStatus"`
	BatchPicID        sql.NullInt32  `db:"batch_pic_id" json:"batchPicId"`
}

func (q *Queries) CreateBatch(ctx context.Context, arg CreateBatchParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBatch,
		arg.BatchID,
		arg.BatchEntityID,
		arg.BatchName,
		arg.BatchDescription,
		arg.BatchStartDate,
		arg.BatchEndDate,
		arg.BatchReason,
		arg.BatchType,
		arg.BatchModifiedDate,
		arg.BatchStatus,
		arg.BatchPicID,
	)
	var batch_id int32
	err := row.Scan(&batch_id)
	return batch_id, err
}

const createBatchTrainee = `-- name: CreateBatchTrainee :one
INSERT INTO bootcamp.batch_trainee
(batr_id, batr_status, batr_certificated, batre_certificate_link, batr_access_token, batr_access_grant, batr_review, batr_total_score, batr_modified_date, batr_trainee_entity_id, batr_batch_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING batr_id
`

type CreateBatchTraineeParams struct {
	BatrID               int32          `db:"batr_id" json:"batrId"`
	BatrStatus           sql.NullString `db:"batr_status" json:"batrStatus"`
	BatrCertificated     sql.NullString `db:"batr_certificated" json:"batrCertificated"`
	BatreCertificateLink sql.NullString `db:"batre_certificate_link" json:"batreCertificateLink"`
	BatrAccessToken      sql.NullString `db:"batr_access_token" json:"batrAccessToken"`
	BatrAccessGrant      sql.NullString `db:"batr_access_grant" json:"batrAccessGrant"`
	BatrReview           sql.NullString `db:"batr_review" json:"batrReview"`
	BatrTotalScore       sql.NullInt32  `db:"batr_total_score" json:"batrTotalScore"`
	BatrModifiedDate     sql.NullTime   `db:"batr_modified_date" json:"batrModifiedDate"`
	BatrTraineeEntityID  sql.NullInt32  `db:"batr_trainee_entity_id" json:"batrTraineeEntityId"`
	BatrBatchID          int32          `db:"batr_batch_id" json:"batrBatchId"`
}

func (q *Queries) CreateBatchTrainee(ctx context.Context, arg CreateBatchTraineeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBatchTrainee,
		arg.BatrID,
		arg.BatrStatus,
		arg.BatrCertificated,
		arg.BatreCertificateLink,
		arg.BatrAccessToken,
		arg.BatrAccessGrant,
		arg.BatrReview,
		arg.BatrTotalScore,
		arg.BatrModifiedDate,
		arg.BatrTraineeEntityID,
		arg.BatrBatchID,
	)
	var batr_id int32
	err := row.Scan(&batr_id)
	return batr_id, err
}

const createBatchTraineeEvaluation = `-- name: CreateBatchTraineeEvaluation :one
INSERT INTO bootcamp.batch_trainee_evaluation
(btev_id, btev_type, btev_header, btev_section, btev_skill, btev_week, btev_skor, btev_note, btev_modified_date, btev_batch_id, btev_trainee_entity_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING btev_id
`

type CreateBatchTraineeEvaluationParams struct {
	BtevID              int32          `db:"btev_id" json:"btevId"`
	BtevType            sql.NullString `db:"btev_type" json:"btevType"`
	BtevHeader          sql.NullString `db:"btev_header" json:"btevHeader"`
	BtevSection         sql.NullString `db:"btev_section" json:"btevSection"`
	BtevSkill           sql.NullString `db:"btev_skill" json:"btevSkill"`
	BtevWeek            sql.NullInt32  `db:"btev_week" json:"btevWeek"`
	BtevSkor            sql.NullInt32  `db:"btev_skor" json:"btevSkor"`
	BtevNote            sql.NullString `db:"btev_note" json:"btevNote"`
	BtevModifiedDate    sql.NullTime   `db:"btev_modified_date" json:"btevModifiedDate"`
	BtevBatchID         sql.NullInt32  `db:"btev_batch_id" json:"btevBatchId"`
	BtevTraineeEntityID sql.NullInt32  `db:"btev_trainee_entity_id" json:"btevTraineeEntityId"`
}

func (q *Queries) CreateBatchTraineeEvaluation(ctx context.Context, arg CreateBatchTraineeEvaluationParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBatchTraineeEvaluation,
		arg.BtevID,
		arg.BtevType,
		arg.BtevHeader,
		arg.BtevSection,
		arg.BtevSkill,
		arg.BtevWeek,
		arg.BtevSkor,
		arg.BtevNote,
		arg.BtevModifiedDate,
		arg.BtevBatchID,
		arg.BtevTraineeEntityID,
	)
	var btev_id int32
	err := row.Scan(&btev_id)
	return btev_id, err
}

const createInstructorProgram = `-- name: CreateInstructorProgram :one
INSERT INTO bootcamp.instructor_programs
(batch_id, inpro_entity_id, inpro_emp_entity_id, inpro_modified_date)
VALUES ($1, $2, $3, $4)
RETURNING batch_id
`

type CreateInstructorProgramParams struct {
	BatchID           int32         `db:"batch_id" json:"batchId"`
	InproEntityID     int32         `db:"inpro_entity_id" json:"inproEntityId"`
	InproEmpEntityID  sql.NullInt32 `db:"inpro_emp_entity_id" json:"inproEmpEntityId"`
	InproModifiedDate sql.NullTime  `db:"inpro_modified_date" json:"inproModifiedDate"`
}

func (q *Queries) CreateInstructorProgram(ctx context.Context, arg CreateInstructorProgramParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createInstructorProgram,
		arg.BatchID,
		arg.InproEntityID,
		arg.InproEmpEntityID,
		arg.InproModifiedDate,
	)
	var batch_id int32
	err := row.Scan(&batch_id)
	return batch_id, err
}

const createProgramApply = `-- name: CreateProgramApply :one
INSERT INTO bootcamp.program_apply
(prap_user_entity_id, prap_prog_entity_id, prap_test_score, prap_gpa, prap_iq_test, prap_review, prap_modified_date, prap_status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING prap_user_entity_id
`

type CreateProgramApplyParams struct {
	PrapUserEntityID int32          `db:"prap_user_entity_id" json:"prapUserEntityId"`
	PrapProgEntityID int32          `db:"prap_prog_entity_id" json:"prapProgEntityId"`
	PrapTestScore    sql.NullInt32  `db:"prap_test_score" json:"prapTestScore"`
	PrapGpa          sql.NullInt32  `db:"prap_gpa" json:"prapGpa"`
	PrapIqTest       sql.NullInt32  `db:"prap_iq_test" json:"prapIqTest"`
	PrapReview       sql.NullString `db:"prap_review" json:"prapReview"`
	PrapModifiedDate sql.NullTime   `db:"prap_modified_date" json:"prapModifiedDate"`
	PrapStatus       sql.NullString `db:"prap_status" json:"prapStatus"`
}

func (q *Queries) CreateProgramApply(ctx context.Context, arg CreateProgramApplyParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createProgramApply,
		arg.PrapUserEntityID,
		arg.PrapProgEntityID,
		arg.PrapTestScore,
		arg.PrapGpa,
		arg.PrapIqTest,
		arg.PrapReview,
		arg.PrapModifiedDate,
		arg.PrapStatus,
	)
	var prap_user_entity_id int32
	err := row.Scan(&prap_user_entity_id)
	return prap_user_entity_id, err
}

const createProgramApplyProgress = `-- name: CreateProgramApplyProgress :one
INSERT INTO bootcamp.program_apply_progress
(parog_id, parog_user_entity_id, parog_prog_entity_id, parog_action_date, parog_modified_date, parog_comment, parog_progress_name, parog_emp_entity_id, parog_status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING parog_id
`

type CreateProgramApplyProgressParams struct {
	ParogID           int32          `db:"parog_id" json:"parogId"`
	ParogUserEntityID int32          `db:"parog_user_entity_id" json:"parogUserEntityId"`
	ParogProgEntityID int32          `db:"parog_prog_entity_id" json:"parogProgEntityId"`
	ParogActionDate   sql.NullTime   `db:"parog_action_date" json:"parogActionDate"`
	ParogModifiedDate sql.NullTime   `db:"parog_modified_date" json:"parogModifiedDate"`
	ParogComment      sql.NullString `db:"parog_comment" json:"parogComment"`
	ParogProgressName sql.NullString `db:"parog_progress_name" json:"parogProgressName"`
	ParogEmpEntityID  sql.NullInt32  `db:"parog_emp_entity_id" json:"parogEmpEntityId"`
	ParogStatus       sql.NullString `db:"parog_status" json:"parogStatus"`
}

func (q *Queries) CreateProgramApplyProgress(ctx context.Context, arg CreateProgramApplyProgressParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createProgramApplyProgress,
		arg.ParogID,
		arg.ParogUserEntityID,
		arg.ParogProgEntityID,
		arg.ParogActionDate,
		arg.ParogModifiedDate,
		arg.ParogComment,
		arg.ParogProgressName,
		arg.ParogEmpEntityID,
		arg.ParogStatus,
	)
	var parog_id int32
	err := row.Scan(&parog_id)
	return parog_id, err
}

const deleteBatch = `-- name: DeleteBatch :exec
DELETE  FROM bootcamp.batch
WHERE batch_id = $1
`

func (q *Queries) DeleteBatch(ctx context.Context, batchID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBatch, batchID)
	return err
}

const deleteBatchTrainee = `-- name: DeleteBatchTrainee :exec
DELETE FROM bootcamp.batch_trainee
WHERE batr_id = $1
`

func (q *Queries) DeleteBatchTrainee(ctx context.Context, batrID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBatchTrainee, batrID)
	return err
}

const deleteBatchTraineeEvaluation = `-- name: DeleteBatchTraineeEvaluation :exec
DELETE FROM bootcamp.batch_trainee_evaluation
WHERE btev_id = $1
`

func (q *Queries) DeleteBatchTraineeEvaluation(ctx context.Context, btevID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBatchTraineeEvaluation, btevID)
	return err
}

const deleteInstructorProgram = `-- name: DeleteInstructorProgram :exec
DELETE FROM bootcamp.instructor_programs
WHERE batch_id = $1
`

func (q *Queries) DeleteInstructorProgram(ctx context.Context, batchID int32) error {
	_, err := q.db.ExecContext(ctx, deleteInstructorProgram, batchID)
	return err
}

const deleteProgramApply = `-- name: DeleteProgramApply :exec
DELETE FROM bootcamp.program_apply
WHERE prap_user_entity_id = $1
`

func (q *Queries) DeleteProgramApply(ctx context.Context, prapUserEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProgramApply, prapUserEntityID)
	return err
}

const deleteProgramApplyProgress = `-- name: DeleteProgramApplyProgress :exec
DELETE FROM bootcamp.program_apply_progress
WHERE parog_id = $1
`

func (q *Queries) DeleteProgramApplyProgress(ctx context.Context, parogID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProgramApplyProgress, parogID)
	return err
}

const getBatch = `-- name: GetBatch :one
SELECT batch_id, batch_entity_id, batch_name, batch_description, batch_start_date, batch_end_date, batch_reason, batch_type, batch_modified_date, batch_status, batch_pic_id FROM bootcamp.batch
WHERE batch_id = $1
`

func (q *Queries) GetBatch(ctx context.Context, batchID int32) (BootcampBatch, error) {
	row := q.db.QueryRowContext(ctx, getBatch, batchID)
	var i BootcampBatch
	err := row.Scan(
		&i.BatchID,
		&i.BatchEntityID,
		&i.BatchName,
		&i.BatchDescription,
		&i.BatchStartDate,
		&i.BatchEndDate,
		&i.BatchReason,
		&i.BatchType,
		&i.BatchModifiedDate,
		&i.BatchStatus,
		&i.BatchPicID,
	)
	return i, err
}

const getBatchTrainee = `-- name: GetBatchTrainee :one
SELECT batr_id, batr_status, batr_certificated, batre_certificate_link, batr_access_token, batr_access_grant, batr_review, batr_total_score, batr_modified_date, batr_trainee_entity_id, batr_batch_id FROM bootcamp.batch_trainee
WHERE batr_id = $1
`

func (q *Queries) GetBatchTrainee(ctx context.Context, batrID int32) (BootcampBatchTrainee, error) {
	row := q.db.QueryRowContext(ctx, getBatchTrainee, batrID)
	var i BootcampBatchTrainee
	err := row.Scan(
		&i.BatrID,
		&i.BatrStatus,
		&i.BatrCertificated,
		&i.BatreCertificateLink,
		&i.BatrAccessToken,
		&i.BatrAccessGrant,
		&i.BatrReview,
		&i.BatrTotalScore,
		&i.BatrModifiedDate,
		&i.BatrTraineeEntityID,
		&i.BatrBatchID,
	)
	return i, err
}

const getBatchTraineeEvaluation = `-- name: GetBatchTraineeEvaluation :one
SELECT btev_id, btev_type, btev_header, btev_section, btev_skill, btev_week, btev_skor, btev_note, btev_modified_date, btev_batch_id, btev_trainee_entity_id FROM bootcamp.batch_trainee_evaluation
WHERE btev_id = $1
`

func (q *Queries) GetBatchTraineeEvaluation(ctx context.Context, btevID int32) (BootcampBatchTraineeEvaluation, error) {
	row := q.db.QueryRowContext(ctx, getBatchTraineeEvaluation, btevID)
	var i BootcampBatchTraineeEvaluation
	err := row.Scan(
		&i.BtevID,
		&i.BtevType,
		&i.BtevHeader,
		&i.BtevSection,
		&i.BtevSkill,
		&i.BtevWeek,
		&i.BtevSkor,
		&i.BtevNote,
		&i.BtevModifiedDate,
		&i.BtevBatchID,
		&i.BtevTraineeEntityID,
	)
	return i, err
}

const getInstructorProgram = `-- name: GetInstructorProgram :one
SELECT batch_id, inpro_entity_id, inpro_emp_entity_id, inpro_modified_date FROM bootcamp.instructor_programs
WHERE batch_id = $1
`

func (q *Queries) GetInstructorProgram(ctx context.Context, batchID int32) (BootcampInstructorProgram, error) {
	row := q.db.QueryRowContext(ctx, getInstructorProgram, batchID)
	var i BootcampInstructorProgram
	err := row.Scan(
		&i.BatchID,
		&i.InproEntityID,
		&i.InproEmpEntityID,
		&i.InproModifiedDate,
	)
	return i, err
}

const getProgramApply = `-- name: GetProgramApply :one
SELECT prap_user_entity_id, prap_prog_entity_id, prap_test_score, prap_gpa, prap_iq_test, prap_review, prap_modified_date, prap_status FROM bootcamp.program_apply
WHERE prap_user_entity_id = $1
`

func (q *Queries) GetProgramApply(ctx context.Context, prapUserEntityID int32) (BootcampProgramApply, error) {
	row := q.db.QueryRowContext(ctx, getProgramApply, prapUserEntityID)
	var i BootcampProgramApply
	err := row.Scan(
		&i.PrapUserEntityID,
		&i.PrapProgEntityID,
		&i.PrapTestScore,
		&i.PrapGpa,
		&i.PrapIqTest,
		&i.PrapReview,
		&i.PrapModifiedDate,
		&i.PrapStatus,
	)
	return i, err
}

const getProgramApplyProgress = `-- name: GetProgramApplyProgress :one
SELECT parog_id, parog_user_entity_id, parog_prog_entity_id, parog_action_date, parog_modified_date, parog_comment, parog_progress_name, parog_emp_entity_id, parog_status FROM bootcamp.program_apply_progress
WHERE parog_id = $1
`

func (q *Queries) GetProgramApplyProgress(ctx context.Context, parogID int32) (BootcampProgramApplyProgress, error) {
	row := q.db.QueryRowContext(ctx, getProgramApplyProgress, parogID)
	var i BootcampProgramApplyProgress
	err := row.Scan(
		&i.ParogID,
		&i.ParogUserEntityID,
		&i.ParogProgEntityID,
		&i.ParogActionDate,
		&i.ParogModifiedDate,
		&i.ParogComment,
		&i.ParogProgressName,
		&i.ParogEmpEntityID,
		&i.ParogStatus,
	)
	return i, err
}

const listBatchTraineeEvaluations = `-- name: ListBatchTraineeEvaluations :many
SELECT btev_id, btev_type, btev_header, btev_section, btev_skill, btev_week, btev_skor, btev_note, btev_modified_date, btev_batch_id, btev_trainee_entity_id FROM bootcamp.batch_trainee_evaluation
ORDER BY btev_id
`

func (q *Queries) ListBatchTraineeEvaluations(ctx context.Context) ([]BootcampBatchTraineeEvaluation, error) {
	rows, err := q.db.QueryContext(ctx, listBatchTraineeEvaluations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampBatchTraineeEvaluation
	for rows.Next() {
		var i BootcampBatchTraineeEvaluation
		if err := rows.Scan(
			&i.BtevID,
			&i.BtevType,
			&i.BtevHeader,
			&i.BtevSection,
			&i.BtevSkill,
			&i.BtevWeek,
			&i.BtevSkor,
			&i.BtevNote,
			&i.BtevModifiedDate,
			&i.BtevBatchID,
			&i.BtevTraineeEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBatchTrinee = `-- name: ListBatchTrinee :many
SELECT batr_id, batr_status, batr_certificated, batre_certificate_link, batr_access_token, batr_access_grant, batr_review, batr_total_score, batr_modified_date, batr_trainee_entity_id, batr_batch_id FROM bootcamp.batch_trainee
ORDER BY batr_id
`

func (q *Queries) ListBatchTrinee(ctx context.Context) ([]BootcampBatchTrainee, error) {
	rows, err := q.db.QueryContext(ctx, listBatchTrinee)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampBatchTrainee
	for rows.Next() {
		var i BootcampBatchTrainee
		if err := rows.Scan(
			&i.BatrID,
			&i.BatrStatus,
			&i.BatrCertificated,
			&i.BatreCertificateLink,
			&i.BatrAccessToken,
			&i.BatrAccessGrant,
			&i.BatrReview,
			&i.BatrTotalScore,
			&i.BatrModifiedDate,
			&i.BatrTraineeEntityID,
			&i.BatrBatchID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBatchs = `-- name: ListBatchs :many
SELECT batch_id, batch_entity_id, batch_name, batch_description, batch_start_date, batch_end_date, batch_reason, batch_type, batch_modified_date, batch_status, batch_pic_id FROM bootcamp.batch
ORDER BY batch_name
`

func (q *Queries) ListBatchs(ctx context.Context) ([]BootcampBatch, error) {
	rows, err := q.db.QueryContext(ctx, listBatchs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampBatch
	for rows.Next() {
		var i BootcampBatch
		if err := rows.Scan(
			&i.BatchID,
			&i.BatchEntityID,
			&i.BatchName,
			&i.BatchDescription,
			&i.BatchStartDate,
			&i.BatchEndDate,
			&i.BatchReason,
			&i.BatchType,
			&i.BatchModifiedDate,
			&i.BatchStatus,
			&i.BatchPicID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInstructorPrograms = `-- name: ListInstructorPrograms :many
SELECT batch_id, inpro_entity_id, inpro_emp_entity_id, inpro_modified_date FROM bootcamp.instructor_programs
ORDER BY batch_id
`

func (q *Queries) ListInstructorPrograms(ctx context.Context) ([]BootcampInstructorProgram, error) {
	rows, err := q.db.QueryContext(ctx, listInstructorPrograms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampInstructorProgram
	for rows.Next() {
		var i BootcampInstructorProgram
		if err := rows.Scan(
			&i.BatchID,
			&i.InproEntityID,
			&i.InproEmpEntityID,
			&i.InproModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProgramApplies = `-- name: ListProgramApplies :many
SELECT prap_user_entity_id, prap_prog_entity_id, prap_test_score, prap_gpa, prap_iq_test, prap_review, prap_modified_date, prap_status FROM bootcamp.program_apply
ORDER BY prap_user_entity_id
`

func (q *Queries) ListProgramApplies(ctx context.Context) ([]BootcampProgramApply, error) {
	rows, err := q.db.QueryContext(ctx, listProgramApplies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampProgramApply
	for rows.Next() {
		var i BootcampProgramApply
		if err := rows.Scan(
			&i.PrapUserEntityID,
			&i.PrapProgEntityID,
			&i.PrapTestScore,
			&i.PrapGpa,
			&i.PrapIqTest,
			&i.PrapReview,
			&i.PrapModifiedDate,
			&i.PrapStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProgramApplyProgresses = `-- name: ListProgramApplyProgresses :many
SELECT parog_id, parog_user_entity_id, parog_prog_entity_id, parog_action_date, parog_modified_date, parog_comment, parog_progress_name, parog_emp_entity_id, parog_status FROM bootcamp.program_apply_progress
ORDER BY parog_id
`

func (q *Queries) ListProgramApplyProgresses(ctx context.Context) ([]BootcampProgramApplyProgress, error) {
	rows, err := q.db.QueryContext(ctx, listProgramApplyProgresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BootcampProgramApplyProgress
	for rows.Next() {
		var i BootcampProgramApplyProgress
		if err := rows.Scan(
			&i.ParogID,
			&i.ParogUserEntityID,
			&i.ParogProgEntityID,
			&i.ParogActionDate,
			&i.ParogModifiedDate,
			&i.ParogComment,
			&i.ParogProgressName,
			&i.ParogEmpEntityID,
			&i.ParogStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBatch = `-- name: UpdateBatch :exec
UPDATE bootcamp.batch
SET batch_name = $2,
    batch_description = $3
WHERE batch_id = $1
`

type UpdateBatchParams struct {
	BatchID          int32          `db:"batch_id" json:"batchId"`
	BatchName        sql.NullString `db:"batch_name" json:"batchName"`
	BatchDescription sql.NullString `db:"batch_description" json:"batchDescription"`
}

func (q *Queries) UpdateBatch(ctx context.Context, arg UpdateBatchParams) error {
	_, err := q.db.ExecContext(ctx, updateBatch, arg.BatchID, arg.BatchName, arg.BatchDescription)
	return err
}

const updateBatchTrainee = `-- name: UpdateBatchTrainee :exec
UPDATE bootcamp.batch_trainee
SET batr_status = $2,
    batr_review = $3
WHERE batr_id = $1
`

type UpdateBatchTraineeParams struct {
	BatrID     int32          `db:"batr_id" json:"batrId"`
	BatrStatus sql.NullString `db:"batr_status" json:"batrStatus"`
	BatrReview sql.NullString `db:"batr_review" json:"batrReview"`
}

func (q *Queries) UpdateBatchTrainee(ctx context.Context, arg UpdateBatchTraineeParams) error {
	_, err := q.db.ExecContext(ctx, updateBatchTrainee, arg.BatrID, arg.BatrStatus, arg.BatrReview)
	return err
}

const updateBatchTraineeEvaluation = `-- name: UpdateBatchTraineeEvaluation :exec
UPDATE bootcamp.batch_trainee_evaluation
SET btev_type = $2,
    btev_header = $3
WHERE btev_id = $1
`

type UpdateBatchTraineeEvaluationParams struct {
	BtevID     int32          `db:"btev_id" json:"btevId"`
	BtevType   sql.NullString `db:"btev_type" json:"btevType"`
	BtevHeader sql.NullString `db:"btev_header" json:"btevHeader"`
}

func (q *Queries) UpdateBatchTraineeEvaluation(ctx context.Context, arg UpdateBatchTraineeEvaluationParams) error {
	_, err := q.db.ExecContext(ctx, updateBatchTraineeEvaluation, arg.BtevID, arg.BtevType, arg.BtevHeader)
	return err
}

const updateInstructorProgram = `-- name: UpdateInstructorProgram :exec
UPDATE bootcamp.instructor_programs
SET inpro_entity_id = $2,
    inpro_modified_date = $3
WHERE batch_id = $1
`

type UpdateInstructorProgramParams struct {
	BatchID           int32        `db:"batch_id" json:"batchId"`
	InproEntityID     int32        `db:"inpro_entity_id" json:"inproEntityId"`
	InproModifiedDate sql.NullTime `db:"inpro_modified_date" json:"inproModifiedDate"`
}

func (q *Queries) UpdateInstructorProgram(ctx context.Context, arg UpdateInstructorProgramParams) error {
	_, err := q.db.ExecContext(ctx, updateInstructorProgram, arg.BatchID, arg.InproEntityID, arg.InproModifiedDate)
	return err
}

const updateProgramApply = `-- name: UpdateProgramApply :exec
UPDATE bootcamp.program_apply
SET prap_prog_entity_id = $2,
    prap_modified_date = $3
WHERE prap_user_entity_id = $1
`

type UpdateProgramApplyParams struct {
	PrapUserEntityID int32        `db:"prap_user_entity_id" json:"prapUserEntityId"`
	PrapProgEntityID int32        `db:"prap_prog_entity_id" json:"prapProgEntityId"`
	PrapModifiedDate sql.NullTime `db:"prap_modified_date" json:"prapModifiedDate"`
}

func (q *Queries) UpdateProgramApply(ctx context.Context, arg UpdateProgramApplyParams) error {
	_, err := q.db.ExecContext(ctx, updateProgramApply, arg.PrapUserEntityID, arg.PrapProgEntityID, arg.PrapModifiedDate)
	return err
}

const updateProgramApplyProgress = `-- name: UpdateProgramApplyProgress :exec
UPDATE bootcamp.program_apply_progress
SET parog_user_entity_id = $2,
    parog_modified_date = $3
WHERE parog_id = $1
`

type UpdateProgramApplyProgressParams struct {
	ParogID           int32        `db:"parog_id" json:"parogId"`
	ParogUserEntityID int32        `db:"parog_user_entity_id" json:"parogUserEntityId"`
	ParogModifiedDate sql.NullTime `db:"parog_modified_date" json:"parogModifiedDate"`
}

func (q *Queries) UpdateProgramApplyProgress(ctx context.Context, arg UpdateProgramApplyProgressParams) error {
	_, err := q.db.ExecContext(ctx, updateProgramApplyProgress, arg.ParogID, arg.ParogUserEntityID, arg.ParogModifiedDate)
	return err
}

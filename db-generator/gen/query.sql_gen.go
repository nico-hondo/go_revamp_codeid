// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
)

const createCartItems = `-- name: CreateCartItems :one
INSERT INTO sales.cart_items(cait_id, cait_quantity, cait_unit_price, cait_modified_date,cait_user_entity_id,cait_prog_entity_id) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING cait_id
`

type CreateCartItemsParams struct {
	CaitID           int32          `db:"cait_id" json:"caitId"`
	CaitQuantity     sql.NullInt32  `db:"cait_quantity" json:"caitQuantity"`
	CaitUnitPrice    sql.NullString `db:"cait_unit_price" json:"caitUnitPrice"`
	CaitModifiedDate sql.NullTime   `db:"cait_modified_date" json:"caitModifiedDate"`
	CaitUserEntityID sql.NullInt32  `db:"cait_user_entity_id" json:"caitUserEntityId"`
	CaitProgEntityID sql.NullInt32  `db:"cait_prog_entity_id" json:"caitProgEntityId"`
}

func (q *Queries) CreateCartItems(ctx context.Context, arg CreateCartItemsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createCartItems,
		arg.CaitID,
		arg.CaitQuantity,
		arg.CaitUnitPrice,
		arg.CaitModifiedDate,
		arg.CaitUserEntityID,
		arg.CaitProgEntityID,
	)
	var cait_id int32
	err := row.Scan(&cait_id)
	return cait_id, err
}

const createSales_order_detail = `-- name: CreateSales_order_detail :one
INSERT INTO sales.sales_order_detail(sode_id, sode_qty, sode_unit_price, sode_unit_discount,sode_line_total,sode_modified_date,sode_sohe_id,sode_prog_entity_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING sode_id
`

type CreateSales_order_detailParams struct {
	SodeID           int32          `db:"sode_id" json:"sodeId"`
	SodeQty          sql.NullInt32  `db:"sode_qty" json:"sodeQty"`
	SodeUnitPrice    sql.NullString `db:"sode_unit_price" json:"sodeUnitPrice"`
	SodeUnitDiscount sql.NullString `db:"sode_unit_discount" json:"sodeUnitDiscount"`
	SodeLineTotal    sql.NullInt32  `db:"sode_line_total" json:"sodeLineTotal"`
	SodeModifiedDate sql.NullTime   `db:"sode_modified_date" json:"sodeModifiedDate"`
	SodeSoheID       sql.NullInt32  `db:"sode_sohe_id" json:"sodeSoheId"`
	SodeProgEntityID sql.NullInt32  `db:"sode_prog_entity_id" json:"sodeProgEntityId"`
}

func (q *Queries) CreateSales_order_detail(ctx context.Context, arg CreateSales_order_detailParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSales_order_detail,
		arg.SodeID,
		arg.SodeQty,
		arg.SodeUnitPrice,
		arg.SodeUnitDiscount,
		arg.SodeLineTotal,
		arg.SodeModifiedDate,
		arg.SodeSoheID,
		arg.SodeProgEntityID,
	)
	var sode_id int32
	err := row.Scan(&sode_id)
	return sode_id, err
}

const createSales_order_header = `-- name: CreateSales_order_header :one
INSERT INTO sales.sales_order_header(sohe_id, sohe_order_date, sohe_due_date, sohe_ship_date,sohe_order_number,sohe_account_number,sohe_trpa_code_number,sohe_subtotal,sohe_tax,sohe_total_due,sohe_license_code,sohe_modified_date,sohe_user_entity_id,sohe_status) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING sohe_id
`

type CreateSales_order_headerParams struct {
	SoheID             int32          `db:"sohe_id" json:"soheId"`
	SoheOrderDate      sql.NullTime   `db:"sohe_order_date" json:"soheOrderDate"`
	SoheDueDate        sql.NullTime   `db:"sohe_due_date" json:"soheDueDate"`
	SoheShipDate       sql.NullTime   `db:"sohe_ship_date" json:"soheShipDate"`
	SoheOrderNumber    sql.NullString `db:"sohe_order_number" json:"soheOrderNumber"`
	SoheAccountNumber  sql.NullString `db:"sohe_account_number" json:"soheAccountNumber"`
	SoheTrpaCodeNumber sql.NullString `db:"sohe_trpa_code_number" json:"soheTrpaCodeNumber"`
	SoheSubtotal       sql.NullString `db:"sohe_subtotal" json:"soheSubtotal"`
	SoheTax            sql.NullString `db:"sohe_tax" json:"soheTax"`
	SoheTotalDue       sql.NullInt32  `db:"sohe_total_due" json:"soheTotalDue"`
	SoheLicenseCode    sql.NullString `db:"sohe_license_code" json:"soheLicenseCode"`
	SoheModifiedDate   sql.NullTime   `db:"sohe_modified_date" json:"soheModifiedDate"`
	SoheUserEntityID   sql.NullInt32  `db:"sohe_user_entity_id" json:"soheUserEntityId"`
	SoheStatus         sql.NullString `db:"sohe_status" json:"soheStatus"`
}

func (q *Queries) CreateSales_order_header(ctx context.Context, arg CreateSales_order_headerParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSales_order_header,
		arg.SoheID,
		arg.SoheOrderDate,
		arg.SoheDueDate,
		arg.SoheShipDate,
		arg.SoheOrderNumber,
		arg.SoheAccountNumber,
		arg.SoheTrpaCodeNumber,
		arg.SoheSubtotal,
		arg.SoheTax,
		arg.SoheTotalDue,
		arg.SoheLicenseCode,
		arg.SoheModifiedDate,
		arg.SoheUserEntityID,
		arg.SoheStatus,
	)
	var sohe_id int32
	err := row.Scan(&sohe_id)
	return sohe_id, err
}

const createSales_special_offer = `-- name: CreateSales_special_offer :one
INSERT INTO sales.special_offer(spof_id, spof_description, spof_discount, spof_type,spof_start_date,spof_end_date,spof_min_qty,spof_max_qty,spof_modified_date,spof_cate_id) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING spof_id
`

type CreateSales_special_offerParams struct {
	SpofID           int32          `db:"spof_id" json:"spofId"`
	SpofDescription  sql.NullString `db:"spof_description" json:"spofDescription"`
	SpofDiscount     sql.NullInt32  `db:"spof_discount" json:"spofDiscount"`
	SpofType         sql.NullString `db:"spof_type" json:"spofType"`
	SpofStartDate    sql.NullTime   `db:"spof_start_date" json:"spofStartDate"`
	SpofEndDate      sql.NullTime   `db:"spof_end_date" json:"spofEndDate"`
	SpofMinQty       sql.NullInt32  `db:"spof_min_qty" json:"spofMinQty"`
	SpofMaxQty       sql.NullInt32  `db:"spof_max_qty" json:"spofMaxQty"`
	SpofModifiedDate sql.NullTime   `db:"spof_modified_date" json:"spofModifiedDate"`
	SpofCateID       sql.NullInt32  `db:"spof_cate_id" json:"spofCateId"`
}

func (q *Queries) CreateSales_special_offer(ctx context.Context, arg CreateSales_special_offerParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSales_special_offer,
		arg.SpofID,
		arg.SpofDescription,
		arg.SpofDiscount,
		arg.SpofType,
		arg.SpofStartDate,
		arg.SpofEndDate,
		arg.SpofMinQty,
		arg.SpofMaxQty,
		arg.SpofModifiedDate,
		arg.SpofCateID,
	)
	var spof_id int32
	err := row.Scan(&spof_id)
	return spof_id, err
}

const createSpecial_offer_programs = `-- name: CreateSpecial_offer_programs :one
INSERT INTO sales.special_offer_programs(soco_id, soco_spof_id, soco_prog_entity_id, soco_status,soco_modified_date) VALUES ($1, $2, $3, $4, $5)
RETURNING soco_id
`

type CreateSpecial_offer_programsParams struct {
	SocoID           int32          `db:"soco_id" json:"socoId"`
	SocoSpofID       int32          `db:"soco_spof_id" json:"socoSpofId"`
	SocoProgEntityID int32          `db:"soco_prog_entity_id" json:"socoProgEntityId"`
	SocoStatus       sql.NullString `db:"soco_status" json:"socoStatus"`
	SocoModifiedDate sql.NullTime   `db:"soco_modified_date" json:"socoModifiedDate"`
}

func (q *Queries) CreateSpecial_offer_programs(ctx context.Context, arg CreateSpecial_offer_programsParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createSpecial_offer_programs,
		arg.SocoID,
		arg.SocoSpofID,
		arg.SocoProgEntityID,
		arg.SocoStatus,
		arg.SocoModifiedDate,
	)
	var soco_id int32
	err := row.Scan(&soco_id)
	return soco_id, err
}

const deleteCart_item = `-- name: DeleteCart_item :exec
DELETE FROM sales.cart_items
WHERE cait_id = $1
`

func (q *Queries) DeleteCart_item(ctx context.Context, caitID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCart_item, caitID)
	return err
}

const deleteSales_order_detail = `-- name: DeleteSales_order_detail :exec
DELETE FROM sales.sales_order_detail
WHERE sode_id = $1
`

func (q *Queries) DeleteSales_order_detail(ctx context.Context, sodeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSales_order_detail, sodeID)
	return err
}

const deleteSales_order_header = `-- name: DeleteSales_order_header :exec
DELETE FROM sales.sales_order_header
WHERE sohe_id = $1
`

func (q *Queries) DeleteSales_order_header(ctx context.Context, soheID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSales_order_header, soheID)
	return err
}

const deleteSales_special_offer = `-- name: DeleteSales_special_offer :exec
DELETE FROM sales.special_offer
WHERE spof_id = $1
`

func (q *Queries) DeleteSales_special_offer(ctx context.Context, spofID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSales_special_offer, spofID)
	return err
}

const deleteSpecial_offer_programs = `-- name: DeleteSpecial_offer_programs :exec
DELETE FROM sales.special_offer_programs
WHERE soco_id = $1
`

func (q *Queries) DeleteSpecial_offer_programs(ctx context.Context, socoID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSpecial_offer_programs, socoID)
	return err
}

const getcSpecial_offer = `-- name: GetcSpecial_offer :one
SELECT spof_id, spof_description, spof_discount, spof_type, spof_start_date, spof_end_date, spof_min_qty, spof_max_qty, spof_modified_date, spof_cate_id FROM sales.special_offer
WHERE spof_id = $1
`

func (q *Queries) GetcSpecial_offer(ctx context.Context, spofID int32) (SalesSpecialOffer, error) {
	row := q.db.QueryRowContext(ctx, getcSpecial_offer, spofID)
	var i SalesSpecialOffer
	err := row.Scan(
		&i.SpofID,
		&i.SpofDescription,
		&i.SpofDiscount,
		&i.SpofType,
		&i.SpofStartDate,
		&i.SpofEndDate,
		&i.SpofMinQty,
		&i.SpofMaxQty,
		&i.SpofModifiedDate,
		&i.SpofCateID,
	)
	return i, err
}

const getcSpecial_offer_programs = `-- name: GetcSpecial_offer_programs :one
SELECT soco_id, soco_spof_id, soco_prog_entity_id, soco_status, soco_modified_date FROM sales.special_offer_programs
WHERE soco_id = $1
`

func (q *Queries) GetcSpecial_offer_programs(ctx context.Context, socoID int32) (SalesSpecialOfferProgram, error) {
	row := q.db.QueryRowContext(ctx, getcSpecial_offer_programs, socoID)
	var i SalesSpecialOfferProgram
	err := row.Scan(
		&i.SocoID,
		&i.SocoSpofID,
		&i.SocoProgEntityID,
		&i.SocoStatus,
		&i.SocoModifiedDate,
	)
	return i, err
}

const getcart_items = `-- name: Getcart_items :one
SELECT cait_id, cait_quantity, cait_unit_price, cait_modified_date, cait_user_entity_id, cait_prog_entity_id FROM sales.cart_items
WHERE cait_id = $1
`

func (q *Queries) Getcart_items(ctx context.Context, caitID int32) (SalesCartItem, error) {
	row := q.db.QueryRowContext(ctx, getcart_items, caitID)
	var i SalesCartItem
	err := row.Scan(
		&i.CaitID,
		&i.CaitQuantity,
		&i.CaitUnitPrice,
		&i.CaitModifiedDate,
		&i.CaitUserEntityID,
		&i.CaitProgEntityID,
	)
	return i, err
}

const getsales_order_detail = `-- name: Getsales_order_detail :one
SELECT sode_id, sode_qty, sode_unit_price, sode_unit_discount, sode_line_total, sode_modified_date, sode_sohe_id, sode_prog_entity_id FROM sales.sales_order_detail
WHERE sode_id = $1
`

func (q *Queries) Getsales_order_detail(ctx context.Context, sodeID int32) (SalesSalesOrderDetail, error) {
	row := q.db.QueryRowContext(ctx, getsales_order_detail, sodeID)
	var i SalesSalesOrderDetail
	err := row.Scan(
		&i.SodeID,
		&i.SodeQty,
		&i.SodeUnitPrice,
		&i.SodeUnitDiscount,
		&i.SodeLineTotal,
		&i.SodeModifiedDate,
		&i.SodeSoheID,
		&i.SodeProgEntityID,
	)
	return i, err
}

const getsales_order_header = `-- name: Getsales_order_header :one
SELECT sohe_id, sohe_order_date, sohe_due_date, sohe_ship_date, sohe_order_number, sohe_account_number, sohe_trpa_code_number, sohe_subtotal, sohe_tax, sohe_total_due, sohe_license_code, sohe_modified_date, sohe_user_entity_id, sohe_status FROM sales.sales_order_header
WHERE sohe_id = $1
`

func (q *Queries) Getsales_order_header(ctx context.Context, soheID int32) (SalesSalesOrderHeader, error) {
	row := q.db.QueryRowContext(ctx, getsales_order_header, soheID)
	var i SalesSalesOrderHeader
	err := row.Scan(
		&i.SoheID,
		&i.SoheOrderDate,
		&i.SoheDueDate,
		&i.SoheShipDate,
		&i.SoheOrderNumber,
		&i.SoheAccountNumber,
		&i.SoheTrpaCodeNumber,
		&i.SoheSubtotal,
		&i.SoheTax,
		&i.SoheTotalDue,
		&i.SoheLicenseCode,
		&i.SoheModifiedDate,
		&i.SoheUserEntityID,
		&i.SoheStatus,
	)
	return i, err
}

const listCart_item = `-- name: ListCart_item :many
SELECT cait_id, cait_quantity, cait_unit_price, cait_modified_date, cait_user_entity_id, cait_prog_entity_id FROM sales.cart_items
ORDER BY cait_quantity
`

func (q *Queries) ListCart_item(ctx context.Context) ([]SalesCartItem, error) {
	rows, err := q.db.QueryContext(ctx, listCart_item)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesCartItem
	for rows.Next() {
		var i SalesCartItem
		if err := rows.Scan(
			&i.CaitID,
			&i.CaitQuantity,
			&i.CaitUnitPrice,
			&i.CaitModifiedDate,
			&i.CaitUserEntityID,
			&i.CaitProgEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSales_order_detail = `-- name: ListSales_order_detail :many
SELECT sode_id, sode_qty, sode_unit_price, sode_unit_discount, sode_line_total, sode_modified_date, sode_sohe_id, sode_prog_entity_id FROM sales.sales_order_detail
ORDER BY sode_qty
`

func (q *Queries) ListSales_order_detail(ctx context.Context) ([]SalesSalesOrderDetail, error) {
	rows, err := q.db.QueryContext(ctx, listSales_order_detail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesSalesOrderDetail
	for rows.Next() {
		var i SalesSalesOrderDetail
		if err := rows.Scan(
			&i.SodeID,
			&i.SodeQty,
			&i.SodeUnitPrice,
			&i.SodeUnitDiscount,
			&i.SodeLineTotal,
			&i.SodeModifiedDate,
			&i.SodeSoheID,
			&i.SodeProgEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSales_order_header = `-- name: ListSales_order_header :many
SELECT sohe_id, sohe_order_date, sohe_due_date, sohe_ship_date, sohe_order_number, sohe_account_number, sohe_trpa_code_number, sohe_subtotal, sohe_tax, sohe_total_due, sohe_license_code, sohe_modified_date, sohe_user_entity_id, sohe_status FROM sales.sales_order_header
ORDER BY  sohe_order_date
`

func (q *Queries) ListSales_order_header(ctx context.Context) ([]SalesSalesOrderHeader, error) {
	rows, err := q.db.QueryContext(ctx, listSales_order_header)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesSalesOrderHeader
	for rows.Next() {
		var i SalesSalesOrderHeader
		if err := rows.Scan(
			&i.SoheID,
			&i.SoheOrderDate,
			&i.SoheDueDate,
			&i.SoheShipDate,
			&i.SoheOrderNumber,
			&i.SoheAccountNumber,
			&i.SoheTrpaCodeNumber,
			&i.SoheSubtotal,
			&i.SoheTax,
			&i.SoheTotalDue,
			&i.SoheLicenseCode,
			&i.SoheModifiedDate,
			&i.SoheUserEntityID,
			&i.SoheStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpecial_offer = `-- name: ListSpecial_offer :many
SELECT spof_id, spof_description, spof_discount, spof_type, spof_start_date, spof_end_date, spof_min_qty, spof_max_qty, spof_modified_date, spof_cate_id FROM sales.special_offer
ORDER BY  spof_description
`

func (q *Queries) ListSpecial_offer(ctx context.Context) ([]SalesSpecialOffer, error) {
	rows, err := q.db.QueryContext(ctx, listSpecial_offer)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesSpecialOffer
	for rows.Next() {
		var i SalesSpecialOffer
		if err := rows.Scan(
			&i.SpofID,
			&i.SpofDescription,
			&i.SpofDiscount,
			&i.SpofType,
			&i.SpofStartDate,
			&i.SpofEndDate,
			&i.SpofMinQty,
			&i.SpofMaxQty,
			&i.SpofModifiedDate,
			&i.SpofCateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSpecial_offer_programs = `-- name: ListSpecial_offer_programs :many
SELECT soco_id, soco_spof_id, soco_prog_entity_id, soco_status, soco_modified_date FROM sales.special_offer_programs
ORDER BY soco_spof_id
`

func (q *Queries) ListSpecial_offer_programs(ctx context.Context) ([]SalesSpecialOfferProgram, error) {
	rows, err := q.db.QueryContext(ctx, listSpecial_offer_programs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesSpecialOfferProgram
	for rows.Next() {
		var i SalesSpecialOfferProgram
		if err := rows.Scan(
			&i.SocoID,
			&i.SocoSpofID,
			&i.SocoProgEntityID,
			&i.SocoStatus,
			&i.SocoModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCart_item = `-- name: UpdateCart_item :exec
UPDATE sales.cart_items
  set cait_quantity = $2,
  cait_unit_price = $3
WHERE cait_id = $1
`

type UpdateCart_itemParams struct {
	CaitID        int32          `db:"cait_id" json:"caitId"`
	CaitQuantity  sql.NullInt32  `db:"cait_quantity" json:"caitQuantity"`
	CaitUnitPrice sql.NullString `db:"cait_unit_price" json:"caitUnitPrice"`
}

func (q *Queries) UpdateCart_item(ctx context.Context, arg UpdateCart_itemParams) error {
	_, err := q.db.ExecContext(ctx, updateCart_item, arg.CaitID, arg.CaitQuantity, arg.CaitUnitPrice)
	return err
}

const updateSales_order_detail = `-- name: UpdateSales_order_detail :exec
UPDATE sales.sales_order_detail
  set sode_qty = $2,
  sode_unit_price = $3
WHERE sode_id = $1
`

type UpdateSales_order_detailParams struct {
	SodeID        int32          `db:"sode_id" json:"sodeId"`
	SodeQty       sql.NullInt32  `db:"sode_qty" json:"sodeQty"`
	SodeUnitPrice sql.NullString `db:"sode_unit_price" json:"sodeUnitPrice"`
}

func (q *Queries) UpdateSales_order_detail(ctx context.Context, arg UpdateSales_order_detailParams) error {
	_, err := q.db.ExecContext(ctx, updateSales_order_detail, arg.SodeID, arg.SodeQty, arg.SodeUnitPrice)
	return err
}

const updateSales_order_header = `-- name: UpdateSales_order_header :exec
UPDATE sales.sales_order_header
  set sohe_order_date = $2,
  sohe_due_date = $3
WHERE sohe_id = $1
`

type UpdateSales_order_headerParams struct {
	SoheID        int32        `db:"sohe_id" json:"soheId"`
	SoheOrderDate sql.NullTime `db:"sohe_order_date" json:"soheOrderDate"`
	SoheDueDate   sql.NullTime `db:"sohe_due_date" json:"soheDueDate"`
}

func (q *Queries) UpdateSales_order_header(ctx context.Context, arg UpdateSales_order_headerParams) error {
	_, err := q.db.ExecContext(ctx, updateSales_order_header, arg.SoheID, arg.SoheOrderDate, arg.SoheDueDate)
	return err
}

const updateSpecial_offer = `-- name: UpdateSpecial_offer :exec
UPDATE sales.special_offer
  set spof_description = $2,
  spof_discount = $3
WHERE spof_id = $1
`

type UpdateSpecial_offerParams struct {
	SpofID          int32          `db:"spof_id" json:"spofId"`
	SpofDescription sql.NullString `db:"spof_description" json:"spofDescription"`
	SpofDiscount    sql.NullInt32  `db:"spof_discount" json:"spofDiscount"`
}

func (q *Queries) UpdateSpecial_offer(ctx context.Context, arg UpdateSpecial_offerParams) error {
	_, err := q.db.ExecContext(ctx, updateSpecial_offer, arg.SpofID, arg.SpofDescription, arg.SpofDiscount)
	return err
}

const updateSpecial_offer_programs = `-- name: UpdateSpecial_offer_programs :exec
UPDATE sales.special_offer_programs
  set soco_spof_id = $2,
  soco_prog_entity_id = $3
WHERE soco_id = $1
`

type UpdateSpecial_offer_programsParams struct {
	SocoID           int32 `db:"soco_id" json:"socoId"`
	SocoSpofID       int32 `db:"soco_spof_id" json:"socoSpofId"`
	SocoProgEntityID int32 `db:"soco_prog_entity_id" json:"socoProgEntityId"`
}

func (q *Queries) UpdateSpecial_offer_programs(ctx context.Context, arg UpdateSpecial_offer_programsParams) error {
	_, err := q.db.ExecContext(ctx, updateSpecial_offer_programs, arg.SocoID, arg.SocoSpofID, arg.SocoProgEntityID)
	return err
}

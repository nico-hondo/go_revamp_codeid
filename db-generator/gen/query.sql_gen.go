// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package models

import (
	"context"
	"database/sql"

	// "github.com/tabbed/pqtype"
)

const createCategory = `-- name: CreateCategory :one

INSERT INTO jobHire.job_category(joca_id, joca_name, joca_modified_date) VALUES ($1, $2, $3)
RETURNING joca_id
`

type CreateCategoryParams struct {
	JocaID           int32          `db:"joca_id" json:"jocaId"`
	JocaName         sql.NullString `db:"joca_name" json:"jocaName"`
	JocaModifiedDate sql.NullTime   `db:"joca_modified_date" json:"jocaModifiedDate"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.JocaID, arg.JocaName, arg.JocaModifiedDate)
	var joca_id int32
	err := row.Scan(&joca_id)
	return joca_id, err
}

const createClient = `-- name: CreateClient :one

INSERT INTO jobHire.client(clit_id, clit_name, clit_about, clit_modified_date, clit_addr_id, clit_emra_id) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING clit_id
`

type CreateClientParams struct {
	ClitID           int32          `db:"clit_id" json:"clitId"`
	ClitName         sql.NullString `db:"clit_name" json:"clitName"`
	ClitAbout        sql.NullString `db:"clit_about" json:"clitAbout"`
	ClitModifiedDate sql.NullTime   `db:"clit_modified_date" json:"clitModifiedDate"`
	ClitAddrID       sql.NullInt32  `db:"clit_addr_id" json:"clitAddrId"`
	ClitEmraID       sql.NullInt32  `db:"clit_emra_id" json:"clitEmraId"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.ClitID,
		arg.ClitName,
		arg.ClitAbout,
		arg.ClitModifiedDate,
		arg.ClitAddrID,
		arg.ClitEmraID,
	)
	var clit_id int32
	err := row.Scan(&clit_id)
	return clit_id, err
}

const createEmployeeRange = `-- name: CreateEmployeeRange :one
INSERT INTO jobHire.employee_range(emra_id, emra_range_min, emra_range_max, emra_modified_date) VALUES ($1, $2, $3, $4)
RETURNING emra_id
`

type CreateEmployeeRangeParams struct {
	EmraID           int32         `db:"emra_id" json:"emraId"`
	EmraRangeMin     sql.NullInt32 `db:"emra_range_min" json:"emraRangeMin"`
	EmraRangeMax     sql.NullInt32 `db:"emra_range_max" json:"emraRangeMax"`
	EmraModifiedDate sql.NullTime  `db:"emra_modified_date" json:"emraModifiedDate"`
}

func (q *Queries) CreateEmployeeRange(ctx context.Context, arg CreateEmployeeRangeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEmployeeRange,
		arg.EmraID,
		arg.EmraRangeMin,
		arg.EmraRangeMax,
		arg.EmraModifiedDate,
	)
	var emra_id int32
	err := row.Scan(&emra_id)
	return emra_id, err
}

const createJobPost = `-- name: CreateJobPost :one
INSERT INTO jobHire.job_post(jopo_entity_id, jopo_number, jopo_title, jopo_start_date, jopo_end_date, jopo_min_salary, jopo_max_salary, jopo_min_experience, jopo_max_experience, jopo_primary_skill, jopo_secondary_skill, jopo_publish_date, jopo_modified_date, jopo_emp_entity_id, jopo_clit_id, jopo_joro_id, jopo_joty_id, jopo_joca_id, jopo_addr_id, jopo_status) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20)
RETURNING jopo_entity_id
`

type CreateJobPostParams struct {
	JopoEntityID       int32          `db:"jopo_entity_id" json:"jopoEntityId"`
	JopoNumber         sql.NullString `db:"jopo_number" json:"jopoNumber"`
	JopoTitle          sql.NullString `db:"jopo_title" json:"jopoTitle"`
	JopoStartDate      sql.NullTime   `db:"jopo_start_date" json:"jopoStartDate"`
	JopoEndDate        sql.NullTime   `db:"jopo_end_date" json:"jopoEndDate"`
	JopoMinSalary      sql.NullInt32  `db:"jopo_min_salary" json:"jopoMinSalary"`
	JopoMaxSalary      sql.NullInt32  `db:"jopo_max_salary" json:"jopoMaxSalary"`
	JopoMinExperience  sql.NullInt32  `db:"jopo_min_experience" json:"jopoMinExperience"`
	JopoMaxExperience  sql.NullInt32  `db:"jopo_max_experience" json:"jopoMaxExperience"`
	JopoPrimarySkill   sql.NullString `db:"jopo_primary_skill" json:"jopoPrimarySkill"`
	JopoSecondarySkill sql.NullString `db:"jopo_secondary_skill" json:"jopoSecondarySkill"`
	JopoPublishDate    sql.NullTime   `db:"jopo_publish_date" json:"jopoPublishDate"`
	JopoModifiedDate   sql.NullTime   `db:"jopo_modified_date" json:"jopoModifiedDate"`
	JopoEmpEntityID    sql.NullInt32  `db:"jopo_emp_entity_id" json:"jopoEmpEntityId"`
	JopoClitID         sql.NullInt32  `db:"jopo_clit_id" json:"jopoClitId"`
	JopoJoroID         sql.NullInt32  `db:"jopo_joro_id" json:"jopoJoroId"`
	JopoJotyID         sql.NullInt32  `db:"jopo_joty_id" json:"jopoJotyId"`
	JopoJocaID         sql.NullInt32  `db:"jopo_joca_id" json:"jopoJocaId"`
	JopoAddrID         sql.NullInt32  `db:"jopo_addr_id" json:"jopoAddrId"`
	JopoStatus         sql.NullString `db:"jopo_status" json:"jopoStatus"`
}

func (q *Queries) CreateJobPost(ctx context.Context, arg CreateJobPostParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createJobPost,
		arg.JopoEntityID,
		arg.JopoNumber,
		arg.JopoTitle,
		arg.JopoStartDate,
		arg.JopoEndDate,
		arg.JopoMinSalary,
		arg.JopoMaxSalary,
		arg.JopoMinExperience,
		arg.JopoMaxExperience,
		arg.JopoPrimarySkill,
		arg.JopoSecondarySkill,
		arg.JopoPublishDate,
		arg.JopoModifiedDate,
		arg.JopoEmpEntityID,
		arg.JopoClitID,
		arg.JopoJoroID,
		arg.JopoJotyID,
		arg.JopoJocaID,
		arg.JopoAddrID,
		arg.JopoStatus,
	)
	var jopo_entity_id int32
	err := row.Scan(&jopo_entity_id)
	return jopo_entity_id, err
}

const createJobPostDesc = `-- name: CreateJobPostDesc :one
INSERT INTO jobHire.job_post_desc(jopo_entity_id, jopo_description, jopo_responsibility, jopo_target, jopo_benefit) VALUES ($1, $2, $3, $4, $5)
RETURNING jopo_entity_id
`

type CreateJobPostDescParams struct {
	JopoEntityID       int32                 `db:"jopo_entity_id" json:"jopoEntityId"`
	JopoDescription    sql.NullString `db:"jopo_description" json:"jopoDescription"`
	JopoResponsibility sql.NullString `db:"jopo_responsibility" json:"jopoResponsibility"`
	JopoTarget         sql.NullString `db:"jopo_target" json:"jopoTarget"`
	JopoBenefit       sql.NullString `db:"jopo_benefit" json:"jopoBenefit"`
}

func (q *Queries) CreateJobPostDesc(ctx context.Context, arg CreateJobPostDescParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createJobPostDesc,
		arg.JopoEntityID,
		arg.JopoDescription,
		arg.JopoResponsibility,
		arg.JopoTarget,
		arg.JopoBenefit,
	)
	var jopo_entity_id int32
	err := row.Scan(&jopo_entity_id)
	return jopo_entity_id, err
}

const createTalentApply = `-- name: CreateTalentApply :one
INSERT INTO jobHire.talent_apply(taap_user_entity_id, taap_entity_id, taap_intro, taap_scoring, taap_modified_date, taap_status) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING taap_user_entity_id
`

type CreateTalentApplyParams struct {
	TaapUserEntityID int32          `db:"taap_user_entity_id" json:"taapUserEntityId"`
	TaapEntityID     int32          `db:"taap_entity_id" json:"taapEntityId"`
	TaapIntro        sql.NullString `db:"taap_intro" json:"taapIntro"`
	TaapScoring      sql.NullInt32  `db:"taap_scoring" json:"taapScoring"`
	TaapModifiedDate sql.NullTime   `db:"taap_modified_date" json:"taapModifiedDate"`
	TaapStatus       sql.NullString `db:"taap_status" json:"taapStatus"`
}

func (q *Queries) CreateTalentApply(ctx context.Context, arg CreateTalentApplyParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createTalentApply,
		arg.TaapUserEntityID,
		arg.TaapEntityID,
		arg.TaapIntro,
		arg.TaapScoring,
		arg.TaapModifiedDate,
		arg.TaapStatus,
	)
	var taap_user_entity_id int32
	err := row.Scan(&taap_user_entity_id)
	return taap_user_entity_id, err
}

const createTalentApplyProgress = `-- name: CreateTalentApplyProgress :one
INSERT INTO jobHire.talent_apply_progress(tapr_id, taap_user_entity_id, taap_entity_id, tapr_modified_date, tapr_status) VALUES ($1, $2, $3, $4, $5)
RETURNING tapr_id
`

type CreateTalentApplyProgressParams struct {
	TaprID           int32          `db:"tapr_id" json:"taprId"`
	TaapUserEntityID int32          `db:"taap_user_entity_id" json:"taapUserEntityId"`
	TaapEntityID     int32          `db:"taap_entity_id" json:"taapEntityId"`
	TaprModifiedDate sql.NullTime   `db:"tapr_modified_date" json:"taprModifiedDate"`
	TaprStatus       string `db:"tapr_status" json:"taprStatus"`
}

func (q *Queries) CreateTalentApplyProgress(ctx context.Context, arg CreateTalentApplyProgressParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createTalentApplyProgress,
		arg.TaprID,
		arg.TaapUserEntityID,
		arg.TaapEntityID,
		arg.TaprModifiedDate,
		arg.TaprStatus,
	)
	var tapr_id int32
	err := row.Scan(&tapr_id)
	return tapr_id, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM jobHire.job_category
WHERE joca_id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, jocaID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, jocaID)
	return err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM jobHire.client
WHERE clit_id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, clitID int32) error {
	_, err := q.db.ExecContext(ctx, deleteClient, clitID)
	return err
}

const deleteEmployeeRange = `-- name: DeleteEmployeeRange :exec
DELETE FROM jobHire.employee_range
WHERE emra_id = $1
`

func (q *Queries) DeleteEmployeeRange(ctx context.Context, emraID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmployeeRange, emraID)
	return err
}

const deleteJobPost = `-- name: DeleteJobPost :exec
DELETE FROM jobHire.job_post
WHERE jopo_entity_id = $1
`

func (q *Queries) DeleteJobPost(ctx context.Context, jopoEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteJobPost, jopoEntityID)
	return err
}

const deleteJobPostDesc = `-- name: DeleteJobPostDesc :exec
DELETE FROM jobHire.job_post_desc
WHERE jopo_entity_id = $1
`

func (q *Queries) DeleteJobPostDesc(ctx context.Context, jopoEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteJobPostDesc, jopoEntityID)
	return err
}

const deleteTalentApply = `-- name: DeleteTalentApply :exec
DELETE FROM jobHire.talent_apply
WHERE taap_user_entity_id = $1
`

func (q *Queries) DeleteTalentApply(ctx context.Context, taapUserEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTalentApply, taapUserEntityID)
	return err
}

const deleteTalentApplyProgress = `-- name: DeleteTalentApplyProgress :exec
DELETE FROM jobHire.talent_apply_progress
WHERE tapr_id = $1
`

func (q *Queries) DeleteTalentApplyProgress(ctx context.Context, taprID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTalentApplyProgress, taprID)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT joca_id, joca_name, joca_modified_date FROM jobHire.job_category
WHERE joca_id = $1
`

func (q *Queries) GetCategory(ctx context.Context, jocaID int32) (JobhireJobCategory, error) {
	row := q.db.QueryRowContext(ctx, getCategory, jocaID)
	var i JobhireJobCategory
	err := row.Scan(&i.JocaID, &i.JocaName, &i.JocaModifiedDate)
	return i, err
}

const getClient = `-- name: GetClient :one
SELECT clit_id, clit_name, clit_about, clit_modified_date, clit_addr_id, clit_emra_id FROM jobHire.client
WHERE clit_id = $1
`

func (q *Queries) GetClient(ctx context.Context, clitID int32) (JobhireClient, error) {
	row := q.db.QueryRowContext(ctx, getClient, clitID)
	var i JobhireClient
	err := row.Scan(
		&i.ClitID,
		&i.ClitName,
		&i.ClitAbout,
		&i.ClitModifiedDate,
		&i.ClitAddrID,
		&i.ClitEmraID,
	)
	return i, err
}

const getEmployeeRange = `-- name: GetEmployeeRange :one
SELECT emra_id, emra_range_min, emra_range_max, emra_modified_date FROM jobHire.employee_range
WHERE emra_id = $1
`

func (q *Queries) GetEmployeeRange(ctx context.Context, emraID int32) (JobhireEmployeeRange, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeRange, emraID)
	var i JobhireEmployeeRange
	err := row.Scan(
		&i.EmraID,
		&i.EmraRangeMin,
		&i.EmraRangeMax,
		&i.EmraModifiedDate,
	)
	return i, err
}

const getJobPost = `-- name: GetJobPost :one
SELECT jopo_entity_id, jopo_number, jopo_title, jopo_start_date, jopo_end_date, jopo_min_salary, jopo_max_salary, jopo_min_experience, jopo_max_experience, jopo_primary_skill, jopo_secondary_skill, jopo_publish_date, jopo_modified_date, jopo_emp_entity_id, jopo_clit_id, jopo_joro_id, jopo_joty_id, jopo_joca_id, jopo_addr_id, jopo_work_code, jopo_edu_code, jopo_indu_code, jopo_status FROM jobHire.job_post
WHERE jopo_entity_id = $1
`

func (q *Queries) GetJobPost(ctx context.Context, jopoEntityID int32) (JobhireJobPost, error) {
	row := q.db.QueryRowContext(ctx, getJobPost, jopoEntityID)
	var i JobhireJobPost
	err := row.Scan(
		&i.JopoEntityID,
		&i.JopoNumber,
		&i.JopoTitle,
		&i.JopoStartDate,
		&i.JopoEndDate,
		&i.JopoMinSalary,
		&i.JopoMaxSalary,
		&i.JopoMinExperience,
		&i.JopoMaxExperience,
		&i.JopoPrimarySkill,
		&i.JopoSecondarySkill,
		&i.JopoPublishDate,
		&i.JopoModifiedDate,
		&i.JopoEmpEntityID,
		&i.JopoClitID,
		&i.JopoJoroID,
		&i.JopoJotyID,
		&i.JopoJocaID,
		&i.JopoAddrID,
		&i.JopoWorkCode,
		&i.JopoEduCode,
		&i.JopoInduCode,
		&i.JopoStatus,
	)
	return i, err
}

const getJobPostDesc = `-- name: GetJobPostDesc :one
SELECT jopo_entity_id, jopo_description, jopo_responsibility, jopo_target, jopo_benefit FROM jobHire.job_post_desc
WHERE jopo_entity_id = $1
`

func (q *Queries) GetJobPostDesc(ctx context.Context, jopoEntityID int32) (JobhireJobPostDesc, error) {
	row := q.db.QueryRowContext(ctx, getJobPostDesc, jopoEntityID)
	var i JobhireJobPostDesc
	err := row.Scan(
		&i.JopoEntityID,
		&i.JopoDescription,
		&i.JopoResponsibility,
		&i.JopoTarget,
		&i.JopoBenefit,
	)
	return i, err
}

const getTalentApply = `-- name: GetTalentApply :one
SELECT taap_user_entity_id, taap_entity_id, taap_intro, taap_scoring, taap_modified_date, taap_status FROM jobHire.talent_apply
WHERE taap_user_entity_id = $1
`

func (q *Queries) GetTalentApply(ctx context.Context, taapUserEntityID int32) (JobhireTalentApply, error) {
	row := q.db.QueryRowContext(ctx, getTalentApply, taapUserEntityID)
	var i JobhireTalentApply
	err := row.Scan(
		&i.TaapUserEntityID,
		&i.TaapEntityID,
		&i.TaapIntro,
		&i.TaapScoring,
		&i.TaapModifiedDate,
		&i.TaapStatus,
	)
	return i, err
}

const getTalentApplyProgress = `-- name: GetTalentApplyProgress :one
SELECT tapr_id, taap_user_entity_id, taap_entity_id, tapr_modified_date, tapr_status, tapr_comment, tapr_progress_name FROM jobHire.talent_apply_progress
WHERE tapr_id = $1
`

func (q *Queries) GetTalentApplyProgress(ctx context.Context, taprID int32) (JobhireTalentApplyProgress, error) {
	row := q.db.QueryRowContext(ctx, getTalentApplyProgress, taprID)
	var i JobhireTalentApplyProgress
	err := row.Scan(
		&i.TaprID,
		&i.TaapUserEntityID,
		&i.TaapEntityID,
		&i.TaprModifiedDate,
		&i.TaprStatus,
		&i.TaprComment,
		&i.TaprProgressName,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT joca_id, joca_name, joca_modified_date FROM jobHire.job_category
ORDER BY joca_name
`

func (q *Queries) ListCategories(ctx context.Context) ([]JobhireJobCategory, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireJobCategory
	for rows.Next() {
		var i JobhireJobCategory
		if err := rows.Scan(&i.JocaID, &i.JocaName, &i.JocaModifiedDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClient = `-- name: ListClient :many
SELECT clit_id, clit_name, clit_about, clit_modified_date, clit_addr_id, clit_emra_id FROM jobHire.client
ORDER BY clit_name
`

func (q *Queries) ListClient(ctx context.Context) ([]JobhireClient, error) {
	rows, err := q.db.QueryContext(ctx, listClient)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireClient
	for rows.Next() {
		var i JobhireClient
		if err := rows.Scan(
			&i.ClitID,
			&i.ClitName,
			&i.ClitAbout,
			&i.ClitModifiedDate,
			&i.ClitAddrID,
			&i.ClitEmraID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeesRange = `-- name: ListEmployeesRange :many
SELECT emra_id, emra_range_min, emra_range_max, emra_modified_date FROM jobHire.employee_range
ORDER BY emra_range_max
`

func (q *Queries) ListEmployeesRange(ctx context.Context) ([]JobhireEmployeeRange, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeesRange)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireEmployeeRange
	for rows.Next() {
		var i JobhireEmployeeRange
		if err := rows.Scan(
			&i.EmraID,
			&i.EmraRangeMin,
			&i.EmraRangeMax,
			&i.EmraModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobPost = `-- name: ListJobPost :many
SELECT jopo_entity_id, jopo_number, jopo_title, jopo_start_date, jopo_end_date, jopo_min_salary, jopo_max_salary, jopo_min_experience, jopo_max_experience, jopo_primary_skill, jopo_secondary_skill, jopo_publish_date, jopo_modified_date, jopo_emp_entity_id, jopo_clit_id, jopo_joro_id, jopo_joty_id, jopo_joca_id, jopo_addr_id, jopo_work_code, jopo_edu_code, jopo_indu_code, jopo_status FROM jobHire.job_post
ORDER BY jopo_title
`

func (q *Queries) ListJobPost(ctx context.Context) ([]JobhireJobPost, error) {
	rows, err := q.db.QueryContext(ctx, listJobPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireJobPost
	for rows.Next() {
		var i JobhireJobPost
		if err := rows.Scan(
			&i.JopoEntityID,
			&i.JopoNumber,
			&i.JopoTitle,
			&i.JopoStartDate,
			&i.JopoEndDate,
			&i.JopoMinSalary,
			&i.JopoMaxSalary,
			&i.JopoMinExperience,
			&i.JopoMaxExperience,
			&i.JopoPrimarySkill,
			&i.JopoSecondarySkill,
			&i.JopoPublishDate,
			&i.JopoModifiedDate,
			&i.JopoEmpEntityID,
			&i.JopoClitID,
			&i.JopoJoroID,
			&i.JopoJotyID,
			&i.JopoJocaID,
			&i.JopoAddrID,
			&i.JopoWorkCode,
			&i.JopoEduCode,
			&i.JopoInduCode,
			&i.JopoStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobPostDesc = `-- name: ListJobPostDesc :many
SELECT jopo_entity_id, jopo_description, jopo_responsibility, jopo_target, jopo_benefit FROM jobHire.job_post_desc
ORDER BY jopo_entity_id
`

func (q *Queries) ListJobPostDesc(ctx context.Context) ([]JobhireJobPostDesc, error) {
	rows, err := q.db.QueryContext(ctx, listJobPostDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireJobPostDesc
	for rows.Next() {
		var i JobhireJobPostDesc
		if err := rows.Scan(
			&i.JopoEntityID,
			&i.JopoDescription,
			&i.JopoResponsibility,
			&i.JopoTarget,
			&i.JopoBenefit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTalentApply = `-- name: ListTalentApply :many
SELECT taap_user_entity_id, taap_entity_id, taap_intro, taap_scoring, taap_modified_date, taap_status FROM jobHire.talent_apply
ORDER BY taap_entity_id
`

func (q *Queries) ListTalentApply(ctx context.Context) ([]JobhireTalentApply, error) {
	rows, err := q.db.QueryContext(ctx, listTalentApply)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireTalentApply
	for rows.Next() {
		var i JobhireTalentApply
		if err := rows.Scan(
			&i.TaapUserEntityID,
			&i.TaapEntityID,
			&i.TaapIntro,
			&i.TaapScoring,
			&i.TaapModifiedDate,
			&i.TaapStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTalentApplyProgress = `-- name: ListTalentApplyProgress :many
SELECT tapr_id, taap_user_entity_id, taap_entity_id, tapr_modified_date, tapr_status, tapr_comment, tapr_progress_name FROM jobHire.talent_apply_progress
ORDER BY tapr_status
`

func (q *Queries) ListTalentApplyProgress(ctx context.Context) ([]JobhireTalentApplyProgress, error) {
	rows, err := q.db.QueryContext(ctx, listTalentApplyProgress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobhireTalentApplyProgress
	for rows.Next() {
		var i JobhireTalentApplyProgress
		if err := rows.Scan(
			&i.TaprID,
			&i.TaapUserEntityID,
			&i.TaapEntityID,
			&i.TaprModifiedDate,
			&i.TaprStatus,
			&i.TaprComment,
			&i.TaprProgressName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

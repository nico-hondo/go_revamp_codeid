// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: queries.sql

package models

import (
	"context"
	"database/sql"
)

const createPaymentBank = `-- name: CreatePaymentBank :one

INSERT INTO
    payment.bank(
        bank_entity_id,
        bank_code,
        bank_name,
        bank_modified_date
    )
VALUES ($1, $2, $3, $4) RETURNING bank_entity_id
`

type CreatePaymentBankParams struct {
	BankEntityID     int32          `db:"bank_entity_id" json:"bankEntityId"`
	BankCode         sql.NullString `db:"bank_code" json:"bankCode"`
	BankName         sql.NullString `db:"bank_name" json:"bankName"`
	BankModifiedDate sql.NullTime   `db:"bank_modified_date" json:"bankModifiedDate"`
}

func (q *Queries) CreatePaymentBank(ctx context.Context, arg CreatePaymentBankParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPaymentBank,
		arg.BankEntityID,
		arg.BankCode,
		arg.BankName,
		arg.BankModifiedDate,
	)
	var bank_entity_id int32
	err := row.Scan(&bank_entity_id)
	return bank_entity_id, err
}

const createPaymentFintech = `-- name: CreatePaymentFintech :one

INSERT INTO
    payment.fintech (
        fint_entity_id,
        fint_code,
        fint_name,
        fint_modified_date
    )
VALUES ($1, $2, $3, $4) RETURNING fint_entity_id
`

type CreatePaymentFintechParams struct {
	FintEntityID     int32          `db:"fint_entity_id" json:"fintEntityId"`
	FintCode         sql.NullString `db:"fint_code" json:"fintCode"`
	FintName         sql.NullString `db:"fint_name" json:"fintName"`
	FintModifiedDate sql.NullTime   `db:"fint_modified_date" json:"fintModifiedDate"`
}

func (q *Queries) CreatePaymentFintech(ctx context.Context, arg CreatePaymentFintechParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPaymentFintech,
		arg.FintEntityID,
		arg.FintCode,
		arg.FintName,
		arg.FintModifiedDate,
	)
	var fint_entity_id int32
	err := row.Scan(&fint_entity_id)
	return fint_entity_id, err
}

const createPaymentTransaction_payment = `-- name: CreatePaymentTransaction_payment :one

INSERT INTO
    payment.transaction_payment (
        trpa_id,
        trpa_code_number,
        trpa_order_number,
        trpa_debit,
        trpa_credit,
        trpa_type,
        trpa_note,
        trpa_modified_date,
        trpa_source_id,
        trpa_target_id,
        trpa_user_entity_id
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10,
        $11
    ) RETURNING trpa_id
`

type CreatePaymentTransaction_paymentParams struct {
	TrpaID           int32          `db:"trpa_id" json:"trpaId"`
	TrpaCodeNumber   sql.NullString `db:"trpa_code_number" json:"trpaCodeNumber"`
	TrpaOrderNumber  sql.NullString `db:"trpa_order_number" json:"trpaOrderNumber"`
	TrpaDebit        sql.NullString `db:"trpa_debit" json:"trpaDebit"`
	TrpaCredit       sql.NullString `db:"trpa_credit" json:"trpaCredit"`
	TrpaType         sql.NullString `db:"trpa_type" json:"trpaType"`
	TrpaNote         sql.NullString `db:"trpa_note" json:"trpaNote"`
	TrpaModifiedDate sql.NullTime   `db:"trpa_modified_date" json:"trpaModifiedDate"`
	TrpaSourceID     string         `db:"trpa_source_id" json:"trpaSourceId"`
	TrpaTargetID     string         `db:"trpa_target_id" json:"trpaTargetId"`
	TrpaUserEntityID sql.NullInt32  `db:"trpa_user_entity_id" json:"trpaUserEntityId"`
}

func (q *Queries) CreatePaymentTransaction_payment(ctx context.Context, arg CreatePaymentTransaction_paymentParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPaymentTransaction_payment,
		arg.TrpaID,
		arg.TrpaCodeNumber,
		arg.TrpaOrderNumber,
		arg.TrpaDebit,
		arg.TrpaCredit,
		arg.TrpaType,
		arg.TrpaNote,
		arg.TrpaModifiedDate,
		arg.TrpaSourceID,
		arg.TrpaTargetID,
		arg.TrpaUserEntityID,
	)
	var trpa_id int32
	err := row.Scan(&trpa_id)
	return trpa_id, err
}

const createPaymentUsers_account = `-- name: CreatePaymentUsers_account :one

INSERT INTO
    payment.users_account (
        usac_bank_entity_id,
        usac_user_entity_id,
        usac_account_number,
        usac_saldo,
        usac_type,
        usac_start_date,
        usac_end_date,
        usac_modified_date,
        usac_status
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING usac_bank_entity_id
`

type CreatePaymentUsers_accountParams struct {
	UsacBankEntityID  int32          `db:"usac_bank_entity_id" json:"usacBankEntityId"`
	UsacUserEntityID  int32          `db:"usac_user_entity_id" json:"usacUserEntityId"`
	UsacAccountNumber sql.NullString `db:"usac_account_number" json:"usacAccountNumber"`
	UsacSaldo         sql.NullString `db:"usac_saldo" json:"usacSaldo"`
	UsacType          sql.NullString `db:"usac_type" json:"usacType"`
	UsacStartDate     sql.NullTime   `db:"usac_start_date" json:"usacStartDate"`
	UsacEndDate       sql.NullTime   `db:"usac_end_date" json:"usacEndDate"`
	UsacModifiedDate  sql.NullTime   `db:"usac_modified_date" json:"usacModifiedDate"`
	UsacStatus        sql.NullString `db:"usac_status" json:"usacStatus"`
}

func (q *Queries) CreatePaymentUsers_account(ctx context.Context, arg CreatePaymentUsers_accountParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPaymentUsers_account,
		arg.UsacBankEntityID,
		arg.UsacUserEntityID,
		arg.UsacAccountNumber,
		arg.UsacSaldo,
		arg.UsacType,
		arg.UsacStartDate,
		arg.UsacEndDate,
		arg.UsacModifiedDate,
		arg.UsacStatus,
	)
	var usac_bank_entity_id int32
	err := row.Scan(&usac_bank_entity_id)
	return usac_bank_entity_id, err
}

const deletePaymentBank = `-- name: DeletePaymentBank :exec

DELETE FROM payment.bank WHERE bank_entity_id = $1
`

func (q *Queries) DeletePaymentBank(ctx context.Context, bankEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deletePaymentBank, bankEntityID)
	return err
}

const deletePaymentFintech = `-- name: DeletePaymentFintech :exec

DELETE FROM payment.fintech WHERE fint_entity_id = $1
`

func (q *Queries) DeletePaymentFintech(ctx context.Context, fintEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deletePaymentFintech, fintEntityID)
	return err
}

const deletePaymentTransaction_payment = `-- name: DeletePaymentTransaction_payment :exec

DELETE FROM payment.transaction_payment WHERE trpa_id = $1
`

func (q *Queries) DeletePaymentTransaction_payment(ctx context.Context, trpaID int32) error {
	_, err := q.db.ExecContext(ctx, deletePaymentTransaction_payment, trpaID)
	return err
}

const deletePaymentUsers_account = `-- name: DeletePaymentUsers_account :exec

DELETE FROM payment.users_account WHERE usac_bank_entity_id = $1
`

func (q *Queries) DeletePaymentUsers_account(ctx context.Context, usacBankEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deletePaymentUsers_account, usacBankEntityID)
	return err
}

const getPaymentBank = `-- name: GetPaymentBank :one


SELECT bank_entity_id, bank_code, bank_name, bank_modified_date FROM payment.bank WHERE bank_entity_id = $1
`

// payment.bank
func (q *Queries) GetPaymentBank(ctx context.Context, bankEntityID int32) (PaymentBank, error) {
	row := q.db.QueryRowContext(ctx, getPaymentBank, bankEntityID)
	var i PaymentBank
	err := row.Scan(
		&i.BankEntityID,
		&i.BankCode,
		&i.BankName,
		&i.BankModifiedDate,
	)
	return i, err
}

const getPaymentFintech = `-- name: GetPaymentFintech :one


SELECT fint_entity_id, fint_code, fint_name, fint_modified_date FROM payment.fintech WHERE fint_entity_id = $1
`

// payment.fintech
func (q *Queries) GetPaymentFintech(ctx context.Context, fintEntityID int32) (PaymentFintech, error) {
	row := q.db.QueryRowContext(ctx, getPaymentFintech, fintEntityID)
	var i PaymentFintech
	err := row.Scan(
		&i.FintEntityID,
		&i.FintCode,
		&i.FintName,
		&i.FintModifiedDate,
	)
	return i, err
}

const getPaymentTransaction_payment = `-- name: GetPaymentTransaction_payment :one


SELECT trpa_id, trpa_code_number, trpa_order_number, trpa_debit, trpa_credit, trpa_type, trpa_note, trpa_modified_date, trpa_source_id, trpa_target_id, trpa_user_entity_id FROM payment.transaction_payment WHERE trpa_id = $1
`

// payment.transaction_payment
func (q *Queries) GetPaymentTransaction_payment(ctx context.Context, trpaID int32) (PaymentTransactionPayment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentTransaction_payment, trpaID)
	var i PaymentTransactionPayment
	err := row.Scan(
		&i.TrpaID,
		&i.TrpaCodeNumber,
		&i.TrpaOrderNumber,
		&i.TrpaDebit,
		&i.TrpaCredit,
		&i.TrpaType,
		&i.TrpaNote,
		&i.TrpaModifiedDate,
		&i.TrpaSourceID,
		&i.TrpaTargetID,
		&i.TrpaUserEntityID,
	)
	return i, err
}

const getPaymentUsers_account = `-- name: GetPaymentUsers_account :one


SELECT usac_bank_entity_id, usac_user_entity_id, usac_account_number, usac_saldo, usac_type, usac_start_date, usac_end_date, usac_modified_date, usac_status FROM payment.users_account WHERE usac_bank_entity_id = $1
`

// payment.users_account
func (q *Queries) GetPaymentUsers_account(ctx context.Context, usacBankEntityID int32) (PaymentUsersAccount, error) {
	row := q.db.QueryRowContext(ctx, getPaymentUsers_account, usacBankEntityID)
	var i PaymentUsersAccount
	err := row.Scan(
		&i.UsacBankEntityID,
		&i.UsacUserEntityID,
		&i.UsacAccountNumber,
		&i.UsacSaldo,
		&i.UsacType,
		&i.UsacStartDate,
		&i.UsacEndDate,
		&i.UsacModifiedDate,
		&i.UsacStatus,
	)
	return i, err
}

const listPaymentBank = `-- name: ListPaymentBank :many

SELECT bank_entity_id, bank_code, bank_name, bank_modified_date FROM payment.bank ORDER BY bank_name
`

func (q *Queries) ListPaymentBank(ctx context.Context) ([]PaymentBank, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentBank)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentBank
	for rows.Next() {
		var i PaymentBank
		if err := rows.Scan(
			&i.BankEntityID,
			&i.BankCode,
			&i.BankName,
			&i.BankModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentFintech = `-- name: ListPaymentFintech :many

SELECT fint_entity_id, fint_code, fint_name, fint_modified_date FROM payment.fintech ORDER BY fint_name
`

func (q *Queries) ListPaymentFintech(ctx context.Context) ([]PaymentFintech, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentFintech)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentFintech
	for rows.Next() {
		var i PaymentFintech
		if err := rows.Scan(
			&i.FintEntityID,
			&i.FintCode,
			&i.FintName,
			&i.FintModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentTransaction_payment = `-- name: ListPaymentTransaction_payment :many

SELECT trpa_id, trpa_code_number, trpa_order_number, trpa_debit, trpa_credit, trpa_type, trpa_note, trpa_modified_date, trpa_source_id, trpa_target_id, trpa_user_entity_id FROM payment.transaction_payment ORDER BY trpa_code_number
`

func (q *Queries) ListPaymentTransaction_payment(ctx context.Context) ([]PaymentTransactionPayment, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentTransaction_payment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentTransactionPayment
	for rows.Next() {
		var i PaymentTransactionPayment
		if err := rows.Scan(
			&i.TrpaID,
			&i.TrpaCodeNumber,
			&i.TrpaOrderNumber,
			&i.TrpaDebit,
			&i.TrpaCredit,
			&i.TrpaType,
			&i.TrpaNote,
			&i.TrpaModifiedDate,
			&i.TrpaSourceID,
			&i.TrpaTargetID,
			&i.TrpaUserEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentUsers_account = `-- name: ListPaymentUsers_account :many

SELECT usac_bank_entity_id, usac_user_entity_id, usac_account_number, usac_saldo, usac_type, usac_start_date, usac_end_date, usac_modified_date, usac_status FROM payment.users_account ORDER BY usac_account_number
`

func (q *Queries) ListPaymentUsers_account(ctx context.Context) ([]PaymentUsersAccount, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentUsers_account)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentUsersAccount
	for rows.Next() {
		var i PaymentUsersAccount
		if err := rows.Scan(
			&i.UsacBankEntityID,
			&i.UsacUserEntityID,
			&i.UsacAccountNumber,
			&i.UsacSaldo,
			&i.UsacType,
			&i.UsacStartDate,
			&i.UsacEndDate,
			&i.UsacModifiedDate,
			&i.UsacStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentFintech = `-- name: UpdatePaymentFintech :exec

UPDATE payment.fintech
set
    fint_code = $2,
    fint_name = $3
WHERE fint_entity_id = $1
`

type UpdatePaymentFintechParams struct {
	FintEntityID int32          `db:"fint_entity_id" json:"fintEntityId"`
	FintCode     sql.NullString `db:"fint_code" json:"fintCode"`
	FintName     sql.NullString `db:"fint_name" json:"fintName"`
}

func (q *Queries) UpdatePaymentFintech(ctx context.Context, arg UpdatePaymentFintechParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentFintech, arg.FintEntityID, arg.FintCode, arg.FintName)
	return err
}

const updatePaymentTransaction_payment = `-- name: UpdatePaymentTransaction_payment :exec

UPDATE
    payment.transaction_payment
set
    trpa_code_number = $2,
    trpa_order_number = $3,
    trpa_debit = $4,
    trpa_credit = $5,
    trpa_type = $6,
    trpa_note = $7,
    trpa_modified_date = $8,
    trpa_source_id = $9,
    trpa_target_id = $10,
    trpa_user_entity_id = $11
WHERE trpa_id = $1
`

type UpdatePaymentTransaction_paymentParams struct {
	TrpaID           int32          `db:"trpa_id" json:"trpaId"`
	TrpaCodeNumber   sql.NullString `db:"trpa_code_number" json:"trpaCodeNumber"`
	TrpaOrderNumber  sql.NullString `db:"trpa_order_number" json:"trpaOrderNumber"`
	TrpaDebit        sql.NullString `db:"trpa_debit" json:"trpaDebit"`
	TrpaCredit       sql.NullString `db:"trpa_credit" json:"trpaCredit"`
	TrpaType         sql.NullString `db:"trpa_type" json:"trpaType"`
	TrpaNote         sql.NullString `db:"trpa_note" json:"trpaNote"`
	TrpaModifiedDate sql.NullTime   `db:"trpa_modified_date" json:"trpaModifiedDate"`
	TrpaSourceID     string         `db:"trpa_source_id" json:"trpaSourceId"`
	TrpaTargetID     string         `db:"trpa_target_id" json:"trpaTargetId"`
	TrpaUserEntityID sql.NullInt32  `db:"trpa_user_entity_id" json:"trpaUserEntityId"`
}

func (q *Queries) UpdatePaymentTransaction_payment(ctx context.Context, arg UpdatePaymentTransaction_paymentParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentTransaction_payment,
		arg.TrpaID,
		arg.TrpaCodeNumber,
		arg.TrpaOrderNumber,
		arg.TrpaDebit,
		arg.TrpaCredit,
		arg.TrpaType,
		arg.TrpaNote,
		arg.TrpaModifiedDate,
		arg.TrpaSourceID,
		arg.TrpaTargetID,
		arg.TrpaUserEntityID,
	)
	return err
}

const updatePaymentUsers_account = `-- name: UpdatePaymentUsers_account :exec

UPDATE payment.users_account
set
    usac_user_entity_id = $2,
    usac_account_number = $3,
    usac_saldo = $4,
    usac_type = $5,
    usac_start_date = $6,
    usac_end_date = $7,
    usac_modified_date = $8,
    usac_status = $9
WHERE usac_bank_entity_id = $1
`

type UpdatePaymentUsers_accountParams struct {
	UsacBankEntityID  int32          `db:"usac_bank_entity_id" json:"usacBankEntityId"`
	UsacUserEntityID  int32          `db:"usac_user_entity_id" json:"usacUserEntityId"`
	UsacAccountNumber sql.NullString `db:"usac_account_number" json:"usacAccountNumber"`
	UsacSaldo         sql.NullString `db:"usac_saldo" json:"usacSaldo"`
	UsacType          sql.NullString `db:"usac_type" json:"usacType"`
	UsacStartDate     sql.NullTime   `db:"usac_start_date" json:"usacStartDate"`
	UsacEndDate       sql.NullTime   `db:"usac_end_date" json:"usacEndDate"`
	UsacModifiedDate  sql.NullTime   `db:"usac_modified_date" json:"usacModifiedDate"`
	UsacStatus        sql.NullString `db:"usac_status" json:"usacStatus"`
}

func (q *Queries) UpdatePaymentUsers_account(ctx context.Context, arg UpdatePaymentUsers_accountParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentUsers_account,
		arg.UsacBankEntityID,
		arg.UsacUserEntityID,
		arg.UsacAccountNumber,
		arg.UsacSaldo,
		arg.UsacType,
		arg.UsacStartDate,
		arg.UsacEndDate,
		arg.UsacModifiedDate,
		arg.UsacStatus,
	)
	return err
}

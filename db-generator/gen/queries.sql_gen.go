// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: queries.sql

package models

import (
	"context"
	"database/sql"
	"time"
)

const createClientContract = `-- name: CreateClientContract :one

INSERT INTO hr.employee_client_contract (ecco_id, ecco_entity_id, ecco_contract_no, ecco_contract_date, ecco_start_date, ecco_end_date, ecco_notes, ecco_modified_date, ecco_media_link, ecco_joty_id, ecco_account_manager, ecco_clit_id, ecco_status) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING ecco_id
`

type CreateClientContractParams struct {
	EccoID             int32          `db:"ecco_id" json:"eccoId"`
	EccoEntityID       int32          `db:"ecco_entity_id" json:"eccoEntityId"`
	EccoContractNo     sql.NullString `db:"ecco_contract_no" json:"eccoContractNo"`
	EccoContractDate   sql.NullTime   `db:"ecco_contract_date" json:"eccoContractDate"`
	EccoStartDate      sql.NullTime   `db:"ecco_start_date" json:"eccoStartDate"`
	EccoEndDate        sql.NullTime   `db:"ecco_end_date" json:"eccoEndDate"`
	EccoNotes          sql.NullString `db:"ecco_notes" json:"eccoNotes"`
	EccoModifiedDate   sql.NullTime   `db:"ecco_modified_date" json:"eccoModifiedDate"`
	EccoMediaLink      sql.NullString `db:"ecco_media_link" json:"eccoMediaLink"`
	EccoJotyID         sql.NullInt32  `db:"ecco_joty_id" json:"eccoJotyId"`
	EccoAccountManager sql.NullInt32  `db:"ecco_account_manager" json:"eccoAccountManager"`
	EccoClitID         sql.NullInt32  `db:"ecco_clit_id" json:"eccoClitId"`
	EccoStatus         sql.NullString `db:"ecco_status" json:"eccoStatus"`
}

func (q *Queries) CreateClientContract(ctx context.Context, arg CreateClientContractParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createClientContract,
		arg.EccoID,
		arg.EccoEntityID,
		arg.EccoContractNo,
		arg.EccoContractDate,
		arg.EccoStartDate,
		arg.EccoEndDate,
		arg.EccoNotes,
		arg.EccoModifiedDate,
		arg.EccoMediaLink,
		arg.EccoJotyID,
		arg.EccoAccountManager,
		arg.EccoClitID,
		arg.EccoStatus,
	)
	var ecco_id int32
	err := row.Scan(&ecco_id)
	return ecco_id, err
}

const createDepartment = `-- name: CreateDepartment :one

INSERT INTO hr.department 
(dept_id, dept_name, dept_modified_date)
VALUES($1,$2,$3)
RETURNING dept_id
`

type CreateDepartmentParams struct {
	DeptID           int32          `db:"dept_id" json:"deptId"`
	DeptName         sql.NullString `db:"dept_name" json:"deptName"`
	DeptModifiedDate sql.NullTime   `db:"dept_modified_date" json:"deptModifiedDate"`
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createDepartment, arg.DeptID, arg.DeptName, arg.DeptModifiedDate)
	var dept_id int32
	err := row.Scan(&dept_id)
	return dept_id, err
}

const createEmployee = `-- name: CreateEmployee :one

INSERT INTO hr.employee (emp_entity_id, emp_emp_number, emp_national_id, emp_birth_date, emp_marital_status, emp_gender, emp_hire_date, emp_salaried_flag, emp_vacation_hours, emp_sickleave_hours, emp_current_flag, emp_modified_date, emp_type, emp_joro_id, emp_emp_entity_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
RETURNING emp_entity_id
`

type CreateEmployeeParams struct {
	EmpEntityID       int32          `db:"emp_entity_id" json:"empEntityId"`
	EmpEmpNumber      sql.NullString `db:"emp_emp_number" json:"empEmpNumber"`
	EmpNationalID     sql.NullString `db:"emp_national_id" json:"empNationalId"`
	EmpBirthDate      sql.NullTime   `db:"emp_birth_date" json:"empBirthDate"`
	EmpMaritalStatus  sql.NullString `db:"emp_marital_status" json:"empMaritalStatus"`
	EmpGender         sql.NullString `db:"emp_gender" json:"empGender"`
	EmpHireDate       sql.NullTime   `db:"emp_hire_date" json:"empHireDate"`
	EmpSalariedFlag   sql.NullString `db:"emp_salaried_flag" json:"empSalariedFlag"`
	EmpVacationHours  sql.NullInt16  `db:"emp_vacation_hours" json:"empVacationHours"`
	EmpSickleaveHours sql.NullInt16  `db:"emp_sickleave_hours" json:"empSickleaveHours"`
	EmpCurrentFlag    sql.NullInt16  `db:"emp_current_flag" json:"empCurrentFlag"`
	EmpModifiedDate   sql.NullTime   `db:"emp_modified_date" json:"empModifiedDate"`
	EmpType           sql.NullString `db:"emp_type" json:"empType"`
	EmpJoroID         sql.NullInt32  `db:"emp_joro_id" json:"empJoroId"`
	EmpEmpEntityID    sql.NullInt32  `db:"emp_emp_entity_id" json:"empEmpEntityId"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEmployee,
		arg.EmpEntityID,
		arg.EmpEmpNumber,
		arg.EmpNationalID,
		arg.EmpBirthDate,
		arg.EmpMaritalStatus,
		arg.EmpGender,
		arg.EmpHireDate,
		arg.EmpSalariedFlag,
		arg.EmpVacationHours,
		arg.EmpSickleaveHours,
		arg.EmpCurrentFlag,
		arg.EmpModifiedDate,
		arg.EmpType,
		arg.EmpJoroID,
		arg.EmpEmpEntityID,
	)
	var emp_entity_id int32
	err := row.Scan(&emp_entity_id)
	return emp_entity_id, err
}

const createEmployeeDepartmentHistory = `-- name: CreateEmployeeDepartmentHistory :one

INSERT INTO hr.employee_department_history 
(edhi_id, edhi_entity_id, edhi_start_date, edhi_end_date, edhi_modified_date, edhi_dept_id)
VALUES($1,$2,$3,$4,$5,$6)
RETURNING edhi_id
`

type CreateEmployeeDepartmentHistoryParams struct {
	EdhiID           int32         `db:"edhi_id" json:"edhiId"`
	EdhiEntityID     int32         `db:"edhi_entity_id" json:"edhiEntityId"`
	EdhiStartDate    sql.NullTime  `db:"edhi_start_date" json:"edhiStartDate"`
	EdhiEndDate      sql.NullTime  `db:"edhi_end_date" json:"edhiEndDate"`
	EdhiModifiedDate sql.NullTime  `db:"edhi_modified_date" json:"edhiModifiedDate"`
	EdhiDeptID       sql.NullInt32 `db:"edhi_dept_id" json:"edhiDeptId"`
}

func (q *Queries) CreateEmployeeDepartmentHistory(ctx context.Context, arg CreateEmployeeDepartmentHistoryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEmployeeDepartmentHistory,
		arg.EdhiID,
		arg.EdhiEntityID,
		arg.EdhiStartDate,
		arg.EdhiEndDate,
		arg.EdhiModifiedDate,
		arg.EdhiDeptID,
	)
	var edhi_id int32
	err := row.Scan(&edhi_id)
	return edhi_id, err
}

const createPayHistory = `-- name: CreatePayHistory :one

INSERT INTO hr.employee_pay_history (ephi_entity_id, ephi_rate_change_date, ephi_rate_salary, ephi_pay_frequence, ephi_modified_date) VALUES ($1, $2, $3, $4, $5)
RETURNING ephi_entity_id
`

type CreatePayHistoryParams struct {
	EphiEntityID       int32         `db:"ephi_entity_id" json:"ephiEntityId"`
	EphiRateChangeDate time.Time     `db:"ephi_rate_change_date" json:"ephiRateChangeDate"`
	EphiRateSalary     sql.NullInt32 `db:"ephi_rate_salary" json:"ephiRateSalary"`
	EphiPayFrequence   sql.NullInt16 `db:"ephi_pay_frequence" json:"ephiPayFrequence"`
	EphiModifiedDate   sql.NullTime  `db:"ephi_modified_date" json:"ephiModifiedDate"`
}

func (q *Queries) CreatePayHistory(ctx context.Context, arg CreatePayHistoryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createPayHistory,
		arg.EphiEntityID,
		arg.EphiRateChangeDate,
		arg.EphiRateSalary,
		arg.EphiPayFrequence,
		arg.EphiModifiedDate,
	)
	var ephi_entity_id int32
	err := row.Scan(&ephi_entity_id)
	return ephi_entity_id, err
}

const deleteClientContract = `-- name: DeleteClientContract :exec
DELETE FROM hr.employee_client_contract
WHERE ecco_id = $1
`

func (q *Queries) DeleteClientContract(ctx context.Context, eccoID int32) error {
	_, err := q.db.ExecContext(ctx, deleteClientContract, eccoID)
	return err
}

const deleteDepartment = `-- name: DeleteDepartment :exec
DELETE FROM hr.department
WHERE dept_id = $1
`

func (q *Queries) DeleteDepartment(ctx context.Context, deptID int32) error {
	_, err := q.db.ExecContext(ctx, deleteDepartment, deptID)
	return err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM hr.employee
WHERE emp_entity_id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, empEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, empEntityID)
	return err
}

const deleteEmployeeDepartmentHistory = `-- name: DeleteEmployeeDepartmentHistory :exec
DELETE FROM hr.employee_department_history
WHERE edhi_id = $1
`

func (q *Queries) DeleteEmployeeDepartmentHistory(ctx context.Context, edhiID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmployeeDepartmentHistory, edhiID)
	return err
}

const deletePayHistory = `-- name: DeletePayHistory :exec
DELETE FROM hr.employee_pay_history
WHERE ephi_entity_id = $1
`

func (q *Queries) DeletePayHistory(ctx context.Context, ephiEntityID int32) error {
	_, err := q.db.ExecContext(ctx, deletePayHistory, ephiEntityID)
	return err
}

const getClientContract = `-- name: GetClientContract :one

SELECT ecco_id, ecco_entity_id, ecco_contract_no, ecco_contract_date, ecco_start_date, ecco_end_date, ecco_notes, ecco_modified_date, ecco_media_link, ecco_joty_id, ecco_account_manager, ecco_clit_id, ecco_status FROM hr.employee_client_contract
WHERE ecco_id = $1
`

// hr.employee_client_contract
func (q *Queries) GetClientContract(ctx context.Context, eccoID int32) (HrEmployeeClientContract, error) {
	row := q.db.QueryRowContext(ctx, getClientContract, eccoID)
	var i HrEmployeeClientContract
	err := row.Scan(
		&i.EccoID,
		&i.EccoEntityID,
		&i.EccoContractNo,
		&i.EccoContractDate,
		&i.EccoStartDate,
		&i.EccoEndDate,
		&i.EccoNotes,
		&i.EccoModifiedDate,
		&i.EccoMediaLink,
		&i.EccoJotyID,
		&i.EccoAccountManager,
		&i.EccoClitID,
		&i.EccoStatus,
	)
	return i, err
}

const getDepartment = `-- name: GetDepartment :one

SELECT dept_id, dept_name, dept_modified_date FROM hr.department
WHERE dept_id = $1
`

// hr.department
func (q *Queries) GetDepartment(ctx context.Context, deptID int32) (HrDepartment, error) {
	row := q.db.QueryRowContext(ctx, getDepartment, deptID)
	var i HrDepartment
	err := row.Scan(&i.DeptID, &i.DeptName, &i.DeptModifiedDate)
	return i, err
}

const getEmployee = `-- name: GetEmployee :one

SELECT emp_entity_id, emp_emp_number, emp_national_id, emp_birth_date, emp_marital_status, emp_gender, emp_hire_date, emp_salaried_flag, emp_vacation_hours, emp_sickleave_hours, emp_current_flag, emp_modified_date, emp_type, emp_joro_id, emp_emp_entity_id FROM hr.employee
WHERE emp_entity_id = $1
`

// hr.employee
func (q *Queries) GetEmployee(ctx context.Context, empEntityID int32) (HrEmployee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, empEntityID)
	var i HrEmployee
	err := row.Scan(
		&i.EmpEntityID,
		&i.EmpEmpNumber,
		&i.EmpNationalID,
		&i.EmpBirthDate,
		&i.EmpMaritalStatus,
		&i.EmpGender,
		&i.EmpHireDate,
		&i.EmpSalariedFlag,
		&i.EmpVacationHours,
		&i.EmpSickleaveHours,
		&i.EmpCurrentFlag,
		&i.EmpModifiedDate,
		&i.EmpType,
		&i.EmpJoroID,
		&i.EmpEmpEntityID,
	)
	return i, err
}

const getEmployeeDepartmentHistory = `-- name: GetEmployeeDepartmentHistory :one

SELECT edhi_id, edhi_entity_id, edhi_start_date, edhi_end_date, edhi_modified_date, edhi_dept_id FROM hr.employee_department_history
WHERE edhi_id = $1
`

// hr.employee_department_history
func (q *Queries) GetEmployeeDepartmentHistory(ctx context.Context, edhiID int32) (HrEmployeeDepartmentHistory, error) {
	row := q.db.QueryRowContext(ctx, getEmployeeDepartmentHistory, edhiID)
	var i HrEmployeeDepartmentHistory
	err := row.Scan(
		&i.EdhiID,
		&i.EdhiEntityID,
		&i.EdhiStartDate,
		&i.EdhiEndDate,
		&i.EdhiModifiedDate,
		&i.EdhiDeptID,
	)
	return i, err
}

const getPayHistory = `-- name: GetPayHistory :one

SELECT ephi_entity_id, ephi_rate_change_date, ephi_rate_salary, ephi_pay_frequence, ephi_modified_date FROM hr.employee_pay_history
WHERE ephi_entity_id = $1
`

// hr.employee_pay_history
func (q *Queries) GetPayHistory(ctx context.Context, ephiEntityID int32) (HrEmployeePayHistory, error) {
	row := q.db.QueryRowContext(ctx, getPayHistory, ephiEntityID)
	var i HrEmployeePayHistory
	err := row.Scan(
		&i.EphiEntityID,
		&i.EphiRateChangeDate,
		&i.EphiRateSalary,
		&i.EphiPayFrequence,
		&i.EphiModifiedDate,
	)
	return i, err
}

const listClientContract = `-- name: ListClientContract :many
SELECT ecco_id, ecco_entity_id, ecco_contract_no, ecco_contract_date, ecco_start_date, ecco_end_date, ecco_notes, ecco_modified_date, ecco_media_link, ecco_joty_id, ecco_account_manager, ecco_clit_id, ecco_status FROM hr.employee_client_contract
ORDER BY ecco_id
`

func (q *Queries) ListClientContract(ctx context.Context) ([]HrEmployeeClientContract, error) {
	rows, err := q.db.QueryContext(ctx, listClientContract)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrEmployeeClientContract
	for rows.Next() {
		var i HrEmployeeClientContract
		if err := rows.Scan(
			&i.EccoID,
			&i.EccoEntityID,
			&i.EccoContractNo,
			&i.EccoContractDate,
			&i.EccoStartDate,
			&i.EccoEndDate,
			&i.EccoNotes,
			&i.EccoModifiedDate,
			&i.EccoMediaLink,
			&i.EccoJotyID,
			&i.EccoAccountManager,
			&i.EccoClitID,
			&i.EccoStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDepartment = `-- name: ListDepartment :many
SELECT dept_id, dept_name, dept_modified_date FROM hr.department
ORDER BY dept_id
`

func (q *Queries) ListDepartment(ctx context.Context) ([]HrDepartment, error) {
	rows, err := q.db.QueryContext(ctx, listDepartment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrDepartment
	for rows.Next() {
		var i HrDepartment
		if err := rows.Scan(&i.DeptID, &i.DeptName, &i.DeptModifiedDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployeeDepartmentHistory = `-- name: ListEmployeeDepartmentHistory :many
SELECT edhi_id, edhi_entity_id, edhi_start_date, edhi_end_date, edhi_modified_date, edhi_dept_id FROM hr.employee_department_history
ORDER BY edhi_id
`

func (q *Queries) ListEmployeeDepartmentHistory(ctx context.Context) ([]HrEmployeeDepartmentHistory, error) {
	rows, err := q.db.QueryContext(ctx, listEmployeeDepartmentHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrEmployeeDepartmentHistory
	for rows.Next() {
		var i HrEmployeeDepartmentHistory
		if err := rows.Scan(
			&i.EdhiID,
			&i.EdhiEntityID,
			&i.EdhiStartDate,
			&i.EdhiEndDate,
			&i.EdhiModifiedDate,
			&i.EdhiDeptID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployees = `-- name: ListEmployees :many
SELECT emp_entity_id, emp_emp_number, emp_national_id, emp_birth_date, emp_marital_status, emp_gender, emp_hire_date, emp_salaried_flag, emp_vacation_hours, emp_sickleave_hours, emp_current_flag, emp_modified_date, emp_type, emp_joro_id, emp_emp_entity_id FROM hr.employee
ORDER BY emp_emp_number
`

func (q *Queries) ListEmployees(ctx context.Context) ([]HrEmployee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrEmployee
	for rows.Next() {
		var i HrEmployee
		if err := rows.Scan(
			&i.EmpEntityID,
			&i.EmpEmpNumber,
			&i.EmpNationalID,
			&i.EmpBirthDate,
			&i.EmpMaritalStatus,
			&i.EmpGender,
			&i.EmpHireDate,
			&i.EmpSalariedFlag,
			&i.EmpVacationHours,
			&i.EmpSickleaveHours,
			&i.EmpCurrentFlag,
			&i.EmpModifiedDate,
			&i.EmpType,
			&i.EmpJoroID,
			&i.EmpEmpEntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPayHistory = `-- name: ListPayHistory :many
SELECT ephi_entity_id, ephi_rate_change_date, ephi_rate_salary, ephi_pay_frequence, ephi_modified_date FROM hr.employee_pay_history
ORDER BY ephi_entity_id
`

func (q *Queries) ListPayHistory(ctx context.Context) ([]HrEmployeePayHistory, error) {
	rows, err := q.db.QueryContext(ctx, listPayHistory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HrEmployeePayHistory
	for rows.Next() {
		var i HrEmployeePayHistory
		if err := rows.Scan(
			&i.EphiEntityID,
			&i.EphiRateChangeDate,
			&i.EphiRateSalary,
			&i.EphiPayFrequence,
			&i.EphiModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClientContract = `-- name: UpdateClientContract :exec
UPDATE hr.employee_client_contract
  set ecco_start_date = $2,
  ecco_end_date = $3
WHERE ecco_id = $1
`

type UpdateClientContractParams struct {
	EccoID        int32        `db:"ecco_id" json:"eccoId"`
	EccoStartDate sql.NullTime `db:"ecco_start_date" json:"eccoStartDate"`
	EccoEndDate   sql.NullTime `db:"ecco_end_date" json:"eccoEndDate"`
}

func (q *Queries) UpdateClientContract(ctx context.Context, arg UpdateClientContractParams) error {
	_, err := q.db.ExecContext(ctx, updateClientContract, arg.EccoID, arg.EccoStartDate, arg.EccoEndDate)
	return err
}

const updateDepartment = `-- name: UpdateDepartment :exec
UPDATE hr.department
  set dept_name = $2
WHERE dept_id = $1
`

type UpdateDepartmentParams struct {
	DeptID   int32          `db:"dept_id" json:"deptId"`
	DeptName sql.NullString `db:"dept_name" json:"deptName"`
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) error {
	_, err := q.db.ExecContext(ctx, updateDepartment, arg.DeptID, arg.DeptName)
	return err
}

const updateEmployeeDepartmentHistory = `-- name: UpdateEmployeeDepartmentHistory :exec
UPDATE hr.employee_department_history
  set edhi_start_date = $2,
  edhi_end_date = $3
WHERE edhi_id = $1
`

type UpdateEmployeeDepartmentHistoryParams struct {
	EdhiID        int32        `db:"edhi_id" json:"edhiId"`
	EdhiStartDate sql.NullTime `db:"edhi_start_date" json:"edhiStartDate"`
	EdhiEndDate   sql.NullTime `db:"edhi_end_date" json:"edhiEndDate"`
}

func (q *Queries) UpdateEmployeeDepartmentHistory(ctx context.Context, arg UpdateEmployeeDepartmentHistoryParams) error {
	_, err := q.db.ExecContext(ctx, updateEmployeeDepartmentHistory, arg.EdhiID, arg.EdhiStartDate, arg.EdhiEndDate)
	return err
}

const updatePayHistory = `-- name: UpdatePayHistory :exec
UPDATE hr.employee_pay_history
  set ephi_rate_salary = $2,
  ephi_pay_frequence = $3
WHERE ephi_entity_id = $1
`

type UpdatePayHistoryParams struct {
	EphiEntityID     int32         `db:"ephi_entity_id" json:"ephiEntityId"`
	EphiRateSalary   sql.NullInt32 `db:"ephi_rate_salary" json:"ephiRateSalary"`
	EphiPayFrequence sql.NullInt16 `db:"ephi_pay_frequence" json:"ephiPayFrequence"`
}

func (q *Queries) UpdatePayHistory(ctx context.Context, arg UpdatePayHistoryParams) error {
	_, err := q.db.ExecContext(ctx, updatePayHistory, arg.EphiEntityID, arg.EphiRateSalary, arg.EphiPayFrequence)
	return err
}
